"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-three";
exports.ids = ["vendor-chunks/@react-three"];
exports.modules = {

/***/ "(ssr)/./node_modules/@react-three/drei/core/MeshDistortMaterial.js":
/*!********************************************************************!*\
  !*** ./node_modules/@react-three/drei/core/MeshDistortMaterial.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MeshDistortMaterial: () => (/* binding */ MeshDistortMaterial)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var _barrel_optimize_names_useFrame_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=useFrame!=!@react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/events-e3cb66e2.esm.js\");\n/* harmony import */ var _helpers_glsl_distort_vert_glsl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/glsl/distort.vert.glsl.js */ \"(ssr)/./node_modules/@react-three/drei/helpers/glsl/distort.vert.glsl.js\");\n\n\n\n\n\nclass DistortMaterialImpl extends three__WEBPACK_IMPORTED_MODULE_2__.MeshPhysicalMaterial {\n    constructor(parameters = {}){\n        super(parameters);\n        this.setValues(parameters);\n        this._time = {\n            value: 0\n        };\n        this._distort = {\n            value: 0.4\n        };\n        this._radius = {\n            value: 1\n        };\n    }\n    // FIXME Use `THREE.WebGLProgramParametersWithUniforms` type when able to target @types/three@0.160.0\n    onBeforeCompile(shader) {\n        shader.uniforms.time = this._time;\n        shader.uniforms.radius = this._radius;\n        shader.uniforms.distort = this._distort;\n        shader.vertexShader = `\n      uniform float time;\n      uniform float radius;\n      uniform float distort;\n      ${_helpers_glsl_distort_vert_glsl_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]}\n      ${shader.vertexShader}\n    `;\n        shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>', `\n        float updateTime = time / 50.0;\n        float noise = snoise(vec3(position / 2.0 + updateTime * 5.0));\n        vec3 transformed = vec3(position * (noise * pow(distort, 2.0) + radius));\n        `);\n    }\n    get time() {\n        return this._time.value;\n    }\n    set time(v) {\n        this._time.value = v;\n    }\n    get distort() {\n        return this._distort.value;\n    }\n    set distort(v) {\n        this._distort.value = v;\n    }\n    get radius() {\n        return this._radius.value;\n    }\n    set radius(v) {\n        this._radius.value = v;\n    }\n}\nconst MeshDistortMaterial = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ speed = 1, ...props }, ref)=>{\n    const [material] = react__WEBPACK_IMPORTED_MODULE_1__.useState({\n        \"MeshDistortMaterial.useState\": ()=>new DistortMaterialImpl()\n    }[\"MeshDistortMaterial.useState\"]);\n    (0,_barrel_optimize_names_useFrame_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.D)({\n        \"MeshDistortMaterial.useFrame\": (state)=>material && (material.time = state.clock.elapsedTime * speed)\n    }[\"MeshDistortMaterial.useFrame\"]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"primitive\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        object: material,\n        ref: ref,\n        attach: \"material\"\n    }, props));\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9NZXNoRGlzdG9ydE1hdGVyaWFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBMEQ7QUFDM0I7QUFDYztBQUNDO0FBQ2E7QUFFM0QsTUFBTUssNEJBQTRCSCx1REFBb0JBO0lBQ3BELFlBQVlJLGFBQWEsQ0FBQyxDQUFDLENBQUU7UUFDM0IsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0MsU0FBUyxDQUFDRDtRQUNmLElBQUksQ0FBQ0UsS0FBSyxHQUFHO1lBQ1hDLE9BQU87UUFDVDtRQUNBLElBQUksQ0FBQ0MsUUFBUSxHQUFHO1lBQ2RELE9BQU87UUFDVDtRQUNBLElBQUksQ0FBQ0UsT0FBTyxHQUFHO1lBQ2JGLE9BQU87UUFDVDtJQUNGO0lBRUEscUdBQXFHO0lBQ3JHRyxnQkFBZ0JDLE1BQU0sRUFBRTtRQUN0QkEsT0FBT0MsUUFBUSxDQUFDQyxJQUFJLEdBQUcsSUFBSSxDQUFDUCxLQUFLO1FBQ2pDSyxPQUFPQyxRQUFRLENBQUNFLE1BQU0sR0FBRyxJQUFJLENBQUNMLE9BQU87UUFDckNFLE9BQU9DLFFBQVEsQ0FBQ1YsT0FBTyxHQUFHLElBQUksQ0FBQ00sUUFBUTtRQUN2Q0csT0FBT0ksWUFBWSxHQUFHLENBQUM7Ozs7TUFJckIsRUFBRWIsMEVBQU9BLENBQUM7TUFDVixFQUFFUyxPQUFPSSxZQUFZLENBQUM7SUFDeEIsQ0FBQztRQUNESixPQUFPSSxZQUFZLEdBQUdKLE9BQU9JLFlBQVksQ0FBQ0MsT0FBTyxDQUFDLDJCQUEyQixDQUFDOzs7O1FBSTFFLENBQUM7SUFDUDtJQUNBLElBQUlILE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQ1AsS0FBSyxDQUFDQyxLQUFLO0lBQ3pCO0lBQ0EsSUFBSU0sS0FBS0ksQ0FBQyxFQUFFO1FBQ1YsSUFBSSxDQUFDWCxLQUFLLENBQUNDLEtBQUssR0FBR1U7SUFDckI7SUFDQSxJQUFJZixVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUNNLFFBQVEsQ0FBQ0QsS0FBSztJQUM1QjtJQUNBLElBQUlMLFFBQVFlLENBQUMsRUFBRTtRQUNiLElBQUksQ0FBQ1QsUUFBUSxDQUFDRCxLQUFLLEdBQUdVO0lBQ3hCO0lBQ0EsSUFBSUgsU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUNGLEtBQUs7SUFDM0I7SUFDQSxJQUFJTyxPQUFPRyxDQUFDLEVBQUU7UUFDWixJQUFJLENBQUNSLE9BQU8sQ0FBQ0YsS0FBSyxHQUFHVTtJQUN2QjtBQUNGO0FBQ0EsTUFBTUMsc0JBQXNCLGFBQWEsaUJBQUVuQiw2Q0FBZ0IsQ0FBQyxDQUFDLEVBQzNEcUIsUUFBUSxDQUFDLEVBQ1QsR0FBR0MsT0FDSixFQUFFQztJQUNELE1BQU0sQ0FBQ0MsU0FBUyxHQUFHeEIsMkNBQWM7d0NBQUMsSUFBTSxJQUFJSTs7SUFDNUNGLG9GQUFRQTt3Q0FBQ3dCLENBQUFBLFFBQVNGLFlBQWFBLENBQUFBLFNBQVNWLElBQUksR0FBR1ksTUFBTUMsS0FBSyxDQUFDQyxXQUFXLEdBQUdQLEtBQUk7O0lBQzdFLE9BQU8sV0FBVyxHQUFFckIsZ0RBQW1CLENBQUMsYUFBYUQsOEVBQVFBLENBQUM7UUFDNUQrQixRQUFRTjtRQUNSRCxLQUFLQTtRQUNMUSxRQUFRO0lBQ1YsR0FBR1Q7QUFDTDtBQUUrQiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxUYXlsb3JcXERlc2t0b3BcXEVhcnRoTmV0XFxub2RlX21vZHVsZXNcXEByZWFjdC10aHJlZVxcZHJlaVxcY29yZVxcTWVzaERpc3RvcnRNYXRlcmlhbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNZXNoUGh5c2ljYWxNYXRlcmlhbCB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IHVzZUZyYW1lIH0gZnJvbSAnQHJlYWN0LXRocmVlL2ZpYmVyJztcbmltcG9ydCBkaXN0b3J0IGZyb20gJy4uL2hlbHBlcnMvZ2xzbC9kaXN0b3J0LnZlcnQuZ2xzbC5qcyc7XG5cbmNsYXNzIERpc3RvcnRNYXRlcmlhbEltcGwgZXh0ZW5kcyBNZXNoUGh5c2ljYWxNYXRlcmlhbCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgIHRoaXMuc2V0VmFsdWVzKHBhcmFtZXRlcnMpO1xuICAgIHRoaXMuX3RpbWUgPSB7XG4gICAgICB2YWx1ZTogMFxuICAgIH07XG4gICAgdGhpcy5fZGlzdG9ydCA9IHtcbiAgICAgIHZhbHVlOiAwLjRcbiAgICB9O1xuICAgIHRoaXMuX3JhZGl1cyA9IHtcbiAgICAgIHZhbHVlOiAxXG4gICAgfTtcbiAgfVxuXG4gIC8vIEZJWE1FIFVzZSBgVEhSRUUuV2ViR0xQcm9ncmFtUGFyYW1ldGVyc1dpdGhVbmlmb3Jtc2AgdHlwZSB3aGVuIGFibGUgdG8gdGFyZ2V0IEB0eXBlcy90aHJlZUAwLjE2MC4wXG4gIG9uQmVmb3JlQ29tcGlsZShzaGFkZXIpIHtcbiAgICBzaGFkZXIudW5pZm9ybXMudGltZSA9IHRoaXMuX3RpbWU7XG4gICAgc2hhZGVyLnVuaWZvcm1zLnJhZGl1cyA9IHRoaXMuX3JhZGl1cztcbiAgICBzaGFkZXIudW5pZm9ybXMuZGlzdG9ydCA9IHRoaXMuX2Rpc3RvcnQ7XG4gICAgc2hhZGVyLnZlcnRleFNoYWRlciA9IGBcbiAgICAgIHVuaWZvcm0gZmxvYXQgdGltZTtcbiAgICAgIHVuaWZvcm0gZmxvYXQgcmFkaXVzO1xuICAgICAgdW5pZm9ybSBmbG9hdCBkaXN0b3J0O1xuICAgICAgJHtkaXN0b3J0fVxuICAgICAgJHtzaGFkZXIudmVydGV4U2hhZGVyfVxuICAgIGA7XG4gICAgc2hhZGVyLnZlcnRleFNoYWRlciA9IHNoYWRlci52ZXJ0ZXhTaGFkZXIucmVwbGFjZSgnI2luY2x1ZGUgPGJlZ2luX3ZlcnRleD4nLCBgXG4gICAgICAgIGZsb2F0IHVwZGF0ZVRpbWUgPSB0aW1lIC8gNTAuMDtcbiAgICAgICAgZmxvYXQgbm9pc2UgPSBzbm9pc2UodmVjMyhwb3NpdGlvbiAvIDIuMCArIHVwZGF0ZVRpbWUgKiA1LjApKTtcbiAgICAgICAgdmVjMyB0cmFuc2Zvcm1lZCA9IHZlYzMocG9zaXRpb24gKiAobm9pc2UgKiBwb3coZGlzdG9ydCwgMi4wKSArIHJhZGl1cykpO1xuICAgICAgICBgKTtcbiAgfVxuICBnZXQgdGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGltZS52YWx1ZTtcbiAgfVxuICBzZXQgdGltZSh2KSB7XG4gICAgdGhpcy5fdGltZS52YWx1ZSA9IHY7XG4gIH1cbiAgZ2V0IGRpc3RvcnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc3RvcnQudmFsdWU7XG4gIH1cbiAgc2V0IGRpc3RvcnQodikge1xuICAgIHRoaXMuX2Rpc3RvcnQudmFsdWUgPSB2O1xuICB9XG4gIGdldCByYWRpdXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JhZGl1cy52YWx1ZTtcbiAgfVxuICBzZXQgcmFkaXVzKHYpIHtcbiAgICB0aGlzLl9yYWRpdXMudmFsdWUgPSB2O1xuICB9XG59XG5jb25zdCBNZXNoRGlzdG9ydE1hdGVyaWFsID0gLyogQF9fUFVSRV9fICovUmVhY3QuZm9yd2FyZFJlZigoe1xuICBzcGVlZCA9IDEsXG4gIC4uLnByb3BzXG59LCByZWYpID0+IHtcbiAgY29uc3QgW21hdGVyaWFsXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IG5ldyBEaXN0b3J0TWF0ZXJpYWxJbXBsKCkpO1xuICB1c2VGcmFtZShzdGF0ZSA9PiBtYXRlcmlhbCAmJiAobWF0ZXJpYWwudGltZSA9IHN0YXRlLmNsb2NrLmVsYXBzZWRUaW1lICogc3BlZWQpKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwicHJpbWl0aXZlXCIsIF9leHRlbmRzKHtcbiAgICBvYmplY3Q6IG1hdGVyaWFsLFxuICAgIHJlZjogcmVmLFxuICAgIGF0dGFjaDogXCJtYXRlcmlhbFwiXG4gIH0sIHByb3BzKSk7XG59KTtcblxuZXhwb3J0IHsgTWVzaERpc3RvcnRNYXRlcmlhbCB9O1xuIl0sIm5hbWVzIjpbIl9leHRlbmRzIiwiUmVhY3QiLCJNZXNoUGh5c2ljYWxNYXRlcmlhbCIsInVzZUZyYW1lIiwiZGlzdG9ydCIsIkRpc3RvcnRNYXRlcmlhbEltcGwiLCJwYXJhbWV0ZXJzIiwic2V0VmFsdWVzIiwiX3RpbWUiLCJ2YWx1ZSIsIl9kaXN0b3J0IiwiX3JhZGl1cyIsIm9uQmVmb3JlQ29tcGlsZSIsInNoYWRlciIsInVuaWZvcm1zIiwidGltZSIsInJhZGl1cyIsInZlcnRleFNoYWRlciIsInJlcGxhY2UiLCJ2IiwiTWVzaERpc3RvcnRNYXRlcmlhbCIsImZvcndhcmRSZWYiLCJzcGVlZCIsInByb3BzIiwicmVmIiwibWF0ZXJpYWwiLCJ1c2VTdGF0ZSIsInN0YXRlIiwiY2xvY2siLCJlbGFwc2VkVGltZSIsImNyZWF0ZUVsZW1lbnQiLCJvYmplY3QiLCJhdHRhY2giXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/MeshDistortMaterial.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/OrbitControls.js":
/*!**************************************************************!*\
  !*** ./node_modules/@react-three/drei/core/OrbitControls.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OrbitControls: () => (/* binding */ OrbitControls)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=useFrame,useThree!=!@react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/events-e3cb66e2.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three_stdlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three-stdlib */ \"(ssr)/./node_modules/three-stdlib/controls/OrbitControls.js\");\n\n\n\n\nconst OrbitControls = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ makeDefault, camera, regress, domElement, enableDamping = true, keyEvents = false, onChange, onStart, onEnd, ...restProps }, ref)=>{\n    const invalidate = (0,_barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.C)({\n        \"OrbitControls.useThree[invalidate]\": (state)=>state.invalidate\n    }[\"OrbitControls.useThree[invalidate]\"]);\n    const defaultCamera = (0,_barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.C)({\n        \"OrbitControls.useThree[defaultCamera]\": (state)=>state.camera\n    }[\"OrbitControls.useThree[defaultCamera]\"]);\n    const gl = (0,_barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.C)({\n        \"OrbitControls.useThree[gl]\": (state)=>state.gl\n    }[\"OrbitControls.useThree[gl]\"]);\n    const events = (0,_barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.C)({\n        \"OrbitControls.useThree[events]\": (state)=>state.events\n    }[\"OrbitControls.useThree[events]\"]);\n    const setEvents = (0,_barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.C)({\n        \"OrbitControls.useThree[setEvents]\": (state)=>state.setEvents\n    }[\"OrbitControls.useThree[setEvents]\"]);\n    const set = (0,_barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.C)({\n        \"OrbitControls.useThree[set]\": (state)=>state.set\n    }[\"OrbitControls.useThree[set]\"]);\n    const get = (0,_barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.C)({\n        \"OrbitControls.useThree[get]\": (state)=>state.get\n    }[\"OrbitControls.useThree[get]\"]);\n    const performance = (0,_barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.C)({\n        \"OrbitControls.useThree[performance]\": (state)=>state.performance\n    }[\"OrbitControls.useThree[performance]\"]);\n    const explCamera = camera || defaultCamera;\n    const explDomElement = domElement || events.connected || gl.domElement;\n    const controls = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"OrbitControls.useMemo[controls]\": ()=>new three_stdlib__WEBPACK_IMPORTED_MODULE_3__.OrbitControls(explCamera)\n    }[\"OrbitControls.useMemo[controls]\"], [\n        explCamera\n    ]);\n    (0,_barrel_optimize_names_useFrame_useThree_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.D)({\n        \"OrbitControls.useFrame\": ()=>{\n            if (controls.enabled) controls.update();\n        }\n    }[\"OrbitControls.useFrame\"], -1);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"OrbitControls.useEffect\": ()=>{\n            if (keyEvents) {\n                controls.connect(keyEvents === true ? explDomElement : keyEvents);\n            }\n            controls.connect(explDomElement);\n            return ({\n                \"OrbitControls.useEffect\": ()=>void controls.dispose()\n            })[\"OrbitControls.useEffect\"];\n        }\n    }[\"OrbitControls.useEffect\"], [\n        keyEvents,\n        explDomElement,\n        regress,\n        controls,\n        invalidate\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"OrbitControls.useEffect\": ()=>{\n            const callback = {\n                \"OrbitControls.useEffect.callback\": (e)=>{\n                    invalidate();\n                    if (regress) performance.regress();\n                    if (onChange) onChange(e);\n                }\n            }[\"OrbitControls.useEffect.callback\"];\n            const onStartCb = {\n                \"OrbitControls.useEffect.onStartCb\": (e)=>{\n                    if (onStart) onStart(e);\n                }\n            }[\"OrbitControls.useEffect.onStartCb\"];\n            const onEndCb = {\n                \"OrbitControls.useEffect.onEndCb\": (e)=>{\n                    if (onEnd) onEnd(e);\n                }\n            }[\"OrbitControls.useEffect.onEndCb\"];\n            controls.addEventListener('change', callback);\n            controls.addEventListener('start', onStartCb);\n            controls.addEventListener('end', onEndCb);\n            return ({\n                \"OrbitControls.useEffect\": ()=>{\n                    controls.removeEventListener('start', onStartCb);\n                    controls.removeEventListener('end', onEndCb);\n                    controls.removeEventListener('change', callback);\n                }\n            })[\"OrbitControls.useEffect\"];\n        }\n    }[\"OrbitControls.useEffect\"], [\n        onChange,\n        onStart,\n        onEnd,\n        controls,\n        invalidate,\n        setEvents\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"OrbitControls.useEffect\": ()=>{\n            if (makeDefault) {\n                const old = get().controls;\n                // @ts-ignore https://github.com/three-types/three-ts-types/pull/1398\n                set({\n                    controls\n                });\n                return ({\n                    \"OrbitControls.useEffect\": ()=>set({\n                            controls: old\n                        })\n                })[\"OrbitControls.useEffect\"];\n            }\n        }\n    }[\"OrbitControls.useEffect\"], [\n        makeDefault,\n        controls\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"primitive\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n        ref: ref,\n        object: controls,\n        enableDamping: enableDamping\n    }, restProps));\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9PcmJpdENvbnRyb2xzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUEwRDtBQUNGO0FBQ3pCO0FBQ2lDO0FBRWhFLE1BQU1JLGdCQUFnQixhQUFhLGlCQUFFRCw2Q0FBZ0IsQ0FBQyxDQUFDLEVBQ3JESSxXQUFXLEVBQ1hDLE1BQU0sRUFDTkMsT0FBTyxFQUNQQyxVQUFVLEVBQ1ZDLGdCQUFnQixJQUFJLEVBQ3BCQyxZQUFZLEtBQUssRUFDakJDLFFBQVEsRUFDUkMsT0FBTyxFQUNQQyxLQUFLLEVBQ0wsR0FBR0MsV0FDSixFQUFFQztJQUNELE1BQU1DLGFBQWFqQiw2RkFBUUE7OENBQUNrQixDQUFBQSxRQUFTQSxNQUFNRCxVQUFVOztJQUNyRCxNQUFNRSxnQkFBZ0JuQiw2RkFBUUE7aURBQUNrQixDQUFBQSxRQUFTQSxNQUFNWCxNQUFNOztJQUNwRCxNQUFNYSxLQUFLcEIsNkZBQVFBO3NDQUFDa0IsQ0FBQUEsUUFBU0EsTUFBTUUsRUFBRTs7SUFDckMsTUFBTUMsU0FBU3JCLDZGQUFRQTswQ0FBQ2tCLENBQUFBLFFBQVNBLE1BQU1HLE1BQU07O0lBQzdDLE1BQU1DLFlBQVl0Qiw2RkFBUUE7NkNBQUNrQixDQUFBQSxRQUFTQSxNQUFNSSxTQUFTOztJQUNuRCxNQUFNQyxNQUFNdkIsNkZBQVFBO3VDQUFDa0IsQ0FBQUEsUUFBU0EsTUFBTUssR0FBRzs7SUFDdkMsTUFBTUMsTUFBTXhCLDZGQUFRQTt1Q0FBQ2tCLENBQUFBLFFBQVNBLE1BQU1NLEdBQUc7O0lBQ3ZDLE1BQU1DLGNBQWN6Qiw2RkFBUUE7K0NBQUNrQixDQUFBQSxRQUFTQSxNQUFNTyxXQUFXOztJQUN2RCxNQUFNQyxhQUFhbkIsVUFBVVk7SUFDN0IsTUFBTVEsaUJBQWlCbEIsY0FBY1ksT0FBT08sU0FBUyxJQUFJUixHQUFHWCxVQUFVO0lBQ3RFLE1BQU1vQixXQUFXM0IsMENBQWE7MkNBQUMsSUFBTSxJQUFJRSx1REFBZUEsQ0FBQ3NCOzBDQUFhO1FBQUNBO0tBQVc7SUFDbEZ6Qiw2RkFBUUE7a0NBQUM7WUFDUCxJQUFJNEIsU0FBU0UsT0FBTyxFQUFFRixTQUFTRyxNQUFNO1FBQ3ZDO2lDQUFHLENBQUM7SUFDSjlCLDRDQUFlO21DQUFDO1lBQ2QsSUFBSVMsV0FBVztnQkFDYmtCLFNBQVNLLE9BQU8sQ0FBQ3ZCLGNBQWMsT0FBT2dCLGlCQUFpQmhCO1lBQ3pEO1lBQ0FrQixTQUFTSyxPQUFPLENBQUNQO1lBQ2pCOzJDQUFPLElBQU0sS0FBS0UsU0FBU00sT0FBTzs7UUFDcEM7a0NBQUc7UUFBQ3hCO1FBQVdnQjtRQUFnQm5CO1FBQVNxQjtRQUFVWjtLQUFXO0lBQzdEZiw0Q0FBZTttQ0FBQztZQUNkLE1BQU1rQztvREFBV0MsQ0FBQUE7b0JBQ2ZwQjtvQkFDQSxJQUFJVCxTQUFTaUIsWUFBWWpCLE9BQU87b0JBQ2hDLElBQUlJLFVBQVVBLFNBQVN5QjtnQkFDekI7O1lBQ0EsTUFBTUM7cURBQVlELENBQUFBO29CQUNoQixJQUFJeEIsU0FBU0EsUUFBUXdCO2dCQUN2Qjs7WUFDQSxNQUFNRTttREFBVUYsQ0FBQUE7b0JBQ2QsSUFBSXZCLE9BQU9BLE1BQU11QjtnQkFDbkI7O1lBQ0FSLFNBQVNXLGdCQUFnQixDQUFDLFVBQVVKO1lBQ3BDUCxTQUFTVyxnQkFBZ0IsQ0FBQyxTQUFTRjtZQUNuQ1QsU0FBU1csZ0JBQWdCLENBQUMsT0FBT0Q7WUFDakM7MkNBQU87b0JBQ0xWLFNBQVNZLG1CQUFtQixDQUFDLFNBQVNIO29CQUN0Q1QsU0FBU1ksbUJBQW1CLENBQUMsT0FBT0Y7b0JBQ3BDVixTQUFTWSxtQkFBbUIsQ0FBQyxVQUFVTDtnQkFDekM7O1FBQ0Y7a0NBQUc7UUFBQ3hCO1FBQVVDO1FBQVNDO1FBQU9lO1FBQVVaO1FBQVlLO0tBQVU7SUFDOURwQiw0Q0FBZTttQ0FBQztZQUNkLElBQUlJLGFBQWE7Z0JBQ2YsTUFBTW9DLE1BQU1sQixNQUFNSyxRQUFRO2dCQUMxQixxRUFBcUU7Z0JBQ3JFTixJQUFJO29CQUNGTTtnQkFDRjtnQkFDQTsrQ0FBTyxJQUFNTixJQUFJOzRCQUNmTSxVQUFVYTt3QkFDWjs7WUFDRjtRQUNGO2tDQUFHO1FBQUNwQztRQUFhdUI7S0FBUztJQUMxQixPQUFPLFdBQVcsR0FBRTNCLGdEQUFtQixDQUFDLGFBQWFILDhFQUFRQSxDQUFDO1FBQzVEaUIsS0FBS0E7UUFDTDRCLFFBQVFmO1FBQ1JuQixlQUFlQTtJQUNqQixHQUFHSztBQUNMO0FBRXlCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFRheWxvclxcRGVza3RvcFxcRWFydGhOZXRcXG5vZGVfbW9kdWxlc1xcQHJlYWN0LXRocmVlXFxkcmVpXFxjb3JlXFxPcmJpdENvbnRyb2xzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IHVzZVRocmVlLCB1c2VGcmFtZSB9IGZyb20gJ0ByZWFjdC10aHJlZS9maWJlcic7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBPcmJpdENvbnRyb2xzIGFzIE9yYml0Q29udHJvbHMkMSB9IGZyb20gJ3RocmVlLXN0ZGxpYic7XG5cbmNvbnN0IE9yYml0Q29udHJvbHMgPSAvKiBAX19QVVJFX18gKi9SZWFjdC5mb3J3YXJkUmVmKCh7XG4gIG1ha2VEZWZhdWx0LFxuICBjYW1lcmEsXG4gIHJlZ3Jlc3MsXG4gIGRvbUVsZW1lbnQsXG4gIGVuYWJsZURhbXBpbmcgPSB0cnVlLFxuICBrZXlFdmVudHMgPSBmYWxzZSxcbiAgb25DaGFuZ2UsXG4gIG9uU3RhcnQsXG4gIG9uRW5kLFxuICAuLi5yZXN0UHJvcHNcbn0sIHJlZikgPT4ge1xuICBjb25zdCBpbnZhbGlkYXRlID0gdXNlVGhyZWUoc3RhdGUgPT4gc3RhdGUuaW52YWxpZGF0ZSk7XG4gIGNvbnN0IGRlZmF1bHRDYW1lcmEgPSB1c2VUaHJlZShzdGF0ZSA9PiBzdGF0ZS5jYW1lcmEpO1xuICBjb25zdCBnbCA9IHVzZVRocmVlKHN0YXRlID0+IHN0YXRlLmdsKTtcbiAgY29uc3QgZXZlbnRzID0gdXNlVGhyZWUoc3RhdGUgPT4gc3RhdGUuZXZlbnRzKTtcbiAgY29uc3Qgc2V0RXZlbnRzID0gdXNlVGhyZWUoc3RhdGUgPT4gc3RhdGUuc2V0RXZlbnRzKTtcbiAgY29uc3Qgc2V0ID0gdXNlVGhyZWUoc3RhdGUgPT4gc3RhdGUuc2V0KTtcbiAgY29uc3QgZ2V0ID0gdXNlVGhyZWUoc3RhdGUgPT4gc3RhdGUuZ2V0KTtcbiAgY29uc3QgcGVyZm9ybWFuY2UgPSB1c2VUaHJlZShzdGF0ZSA9PiBzdGF0ZS5wZXJmb3JtYW5jZSk7XG4gIGNvbnN0IGV4cGxDYW1lcmEgPSBjYW1lcmEgfHwgZGVmYXVsdENhbWVyYTtcbiAgY29uc3QgZXhwbERvbUVsZW1lbnQgPSBkb21FbGVtZW50IHx8IGV2ZW50cy5jb25uZWN0ZWQgfHwgZ2wuZG9tRWxlbWVudDtcbiAgY29uc3QgY29udHJvbHMgPSBSZWFjdC51c2VNZW1vKCgpID0+IG5ldyBPcmJpdENvbnRyb2xzJDEoZXhwbENhbWVyYSksIFtleHBsQ2FtZXJhXSk7XG4gIHVzZUZyYW1lKCgpID0+IHtcbiAgICBpZiAoY29udHJvbHMuZW5hYmxlZCkgY29udHJvbHMudXBkYXRlKCk7XG4gIH0sIC0xKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoa2V5RXZlbnRzKSB7XG4gICAgICBjb250cm9scy5jb25uZWN0KGtleUV2ZW50cyA9PT0gdHJ1ZSA/IGV4cGxEb21FbGVtZW50IDoga2V5RXZlbnRzKTtcbiAgICB9XG4gICAgY29udHJvbHMuY29ubmVjdChleHBsRG9tRWxlbWVudCk7XG4gICAgcmV0dXJuICgpID0+IHZvaWQgY29udHJvbHMuZGlzcG9zZSgpO1xuICB9LCBba2V5RXZlbnRzLCBleHBsRG9tRWxlbWVudCwgcmVncmVzcywgY29udHJvbHMsIGludmFsaWRhdGVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBjYWxsYmFjayA9IGUgPT4ge1xuICAgICAgaW52YWxpZGF0ZSgpO1xuICAgICAgaWYgKHJlZ3Jlc3MpIHBlcmZvcm1hbmNlLnJlZ3Jlc3MoKTtcbiAgICAgIGlmIChvbkNoYW5nZSkgb25DaGFuZ2UoZSk7XG4gICAgfTtcbiAgICBjb25zdCBvblN0YXJ0Q2IgPSBlID0+IHtcbiAgICAgIGlmIChvblN0YXJ0KSBvblN0YXJ0KGUpO1xuICAgIH07XG4gICAgY29uc3Qgb25FbmRDYiA9IGUgPT4ge1xuICAgICAgaWYgKG9uRW5kKSBvbkVuZChlKTtcbiAgICB9O1xuICAgIGNvbnRyb2xzLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGNhbGxiYWNrKTtcbiAgICBjb250cm9scy5hZGRFdmVudExpc3RlbmVyKCdzdGFydCcsIG9uU3RhcnRDYik7XG4gICAgY29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcignZW5kJywgb25FbmRDYik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnRyb2xzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N0YXJ0Jywgb25TdGFydENiKTtcbiAgICAgIGNvbnRyb2xzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZCcsIG9uRW5kQ2IpO1xuICAgICAgY29udHJvbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgY2FsbGJhY2spO1xuICAgIH07XG4gIH0sIFtvbkNoYW5nZSwgb25TdGFydCwgb25FbmQsIGNvbnRyb2xzLCBpbnZhbGlkYXRlLCBzZXRFdmVudHNdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAobWFrZURlZmF1bHQpIHtcbiAgICAgIGNvbnN0IG9sZCA9IGdldCgpLmNvbnRyb2xzO1xuICAgICAgLy8gQHRzLWlnbm9yZSBodHRwczovL2dpdGh1Yi5jb20vdGhyZWUtdHlwZXMvdGhyZWUtdHMtdHlwZXMvcHVsbC8xMzk4XG4gICAgICBzZXQoe1xuICAgICAgICBjb250cm9sc1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gKCkgPT4gc2V0KHtcbiAgICAgICAgY29udHJvbHM6IG9sZFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbWFrZURlZmF1bHQsIGNvbnRyb2xzXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInByaW1pdGl2ZVwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByZWYsXG4gICAgb2JqZWN0OiBjb250cm9scyxcbiAgICBlbmFibGVEYW1waW5nOiBlbmFibGVEYW1waW5nXG4gIH0sIHJlc3RQcm9wcykpO1xufSk7XG5cbmV4cG9ydCB7IE9yYml0Q29udHJvbHMgfTtcbiJdLCJuYW1lcyI6WyJfZXh0ZW5kcyIsInVzZVRocmVlIiwidXNlRnJhbWUiLCJSZWFjdCIsIk9yYml0Q29udHJvbHMiLCJPcmJpdENvbnRyb2xzJDEiLCJmb3J3YXJkUmVmIiwibWFrZURlZmF1bHQiLCJjYW1lcmEiLCJyZWdyZXNzIiwiZG9tRWxlbWVudCIsImVuYWJsZURhbXBpbmciLCJrZXlFdmVudHMiLCJvbkNoYW5nZSIsIm9uU3RhcnQiLCJvbkVuZCIsInJlc3RQcm9wcyIsInJlZiIsImludmFsaWRhdGUiLCJzdGF0ZSIsImRlZmF1bHRDYW1lcmEiLCJnbCIsImV2ZW50cyIsInNldEV2ZW50cyIsInNldCIsImdldCIsInBlcmZvcm1hbmNlIiwiZXhwbENhbWVyYSIsImV4cGxEb21FbGVtZW50IiwiY29ubmVjdGVkIiwiY29udHJvbHMiLCJ1c2VNZW1vIiwiZW5hYmxlZCIsInVwZGF0ZSIsInVzZUVmZmVjdCIsImNvbm5lY3QiLCJkaXNwb3NlIiwiY2FsbGJhY2siLCJlIiwib25TdGFydENiIiwib25FbmRDYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib2xkIiwiY3JlYXRlRWxlbWVudCIsIm9iamVjdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/OrbitControls.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/core/shapes.js":
/*!*******************************************************!*\
  !*** ./node_modules/@react-three/drei/core/shapes.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Box: () => (/* binding */ Box),\n/* harmony export */   Capsule: () => (/* binding */ Capsule),\n/* harmony export */   Circle: () => (/* binding */ Circle),\n/* harmony export */   Cone: () => (/* binding */ Cone),\n/* harmony export */   Cylinder: () => (/* binding */ Cylinder),\n/* harmony export */   Dodecahedron: () => (/* binding */ Dodecahedron),\n/* harmony export */   Extrude: () => (/* binding */ Extrude),\n/* harmony export */   Icosahedron: () => (/* binding */ Icosahedron),\n/* harmony export */   Lathe: () => (/* binding */ Lathe),\n/* harmony export */   Octahedron: () => (/* binding */ Octahedron),\n/* harmony export */   Plane: () => (/* binding */ Plane),\n/* harmony export */   Polyhedron: () => (/* binding */ Polyhedron),\n/* harmony export */   Ring: () => (/* binding */ Ring),\n/* harmony export */   Shape: () => (/* binding */ Shape),\n/* harmony export */   Sphere: () => (/* binding */ Sphere),\n/* harmony export */   Tetrahedron: () => (/* binding */ Tetrahedron),\n/* harmony export */   Torus: () => (/* binding */ Torus),\n/* harmony export */   TorusKnot: () => (/* binding */ TorusKnot),\n/* harmony export */   Tube: () => (/* binding */ Tube)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n\n\n\nfunction create(type, effect) {\n    const El = type + 'Geometry';\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ args, children, ...props }, fref)=>{\n        const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n        react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(fref, {\n            \"create.useImperativeHandle\": ()=>ref.current\n        }[\"create.useImperativeHandle\"]);\n        react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect({\n            \"create.useLayoutEffect\": ()=>void (effect == null ? void 0 : effect(ref.current))\n        }[\"create.useLayoutEffect\"]);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"mesh\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            ref: ref\n        }, props), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(El, {\n            attach: \"geometry\",\n            args: args\n        }), children);\n    });\n}\nconst Box = /* @__PURE__ */ create('box');\nconst Circle = /* @__PURE__ */ create('circle');\nconst Cone = /* @__PURE__ */ create('cone');\nconst Cylinder = /* @__PURE__ */ create('cylinder');\nconst Sphere = /* @__PURE__ */ create('sphere');\nconst Plane = /* @__PURE__ */ create('plane');\nconst Tube = /* @__PURE__ */ create('tube');\nconst Torus = /* @__PURE__ */ create('torus');\nconst TorusKnot = /* @__PURE__ */ create('torusKnot');\nconst Tetrahedron = /* @__PURE__ */ create('tetrahedron');\nconst Ring = /* @__PURE__ */ create('ring');\nconst Polyhedron = /* @__PURE__ */ create('polyhedron');\nconst Icosahedron = /* @__PURE__ */ create('icosahedron');\nconst Octahedron = /* @__PURE__ */ create('octahedron');\nconst Dodecahedron = /* @__PURE__ */ create('dodecahedron');\nconst Extrude = /* @__PURE__ */ create('extrude');\nconst Lathe = /* @__PURE__ */ create('lathe');\nconst Capsule = /* @__PURE__ */ create('capsule');\nconst Shape = /* @__PURE__ */ create('shape', ({ geometry })=>{\n    // Calculate UVs (by https://discourse.threejs.org/u/prisoner849)\n    // https://discourse.threejs.org/t/custom-shape-in-image-not-working/49348/10\n    const pos = geometry.attributes.position;\n    const b3 = new three__WEBPACK_IMPORTED_MODULE_2__.Box3().setFromBufferAttribute(pos);\n    const b3size = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n    b3.getSize(b3size);\n    const uv = [];\n    let x = 0, y = 0, u = 0, v = 0;\n    for(let i = 0; i < pos.count; i++){\n        x = pos.getX(i);\n        y = pos.getY(i);\n        u = (x - b3.min.x) / b3size.x;\n        v = (y - b3.min.y) / b3size.y;\n        uv.push(u, v);\n    }\n    geometry.setAttribute('uv', new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(uv, 2));\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvY29yZS9zaGFwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMEQ7QUFDM0I7QUFDQTtBQUUvQixTQUFTRyxPQUFPQyxJQUFJLEVBQUVDLE1BQU07SUFDMUIsTUFBTUMsS0FBS0YsT0FBTztJQUNsQixPQUFPLFdBQVcsR0FBRUgsNkNBQWdCLENBQUMsQ0FBQyxFQUNwQ08sSUFBSSxFQUNKQyxRQUFRLEVBQ1IsR0FBR0MsT0FDSixFQUFFQztRQUNELE1BQU1DLE1BQU1YLHlDQUFZLENBQUM7UUFDekJBLHNEQUF5QixDQUFDVTswQ0FBTSxJQUFNQyxJQUFJRyxPQUFPOztRQUNqRGQsa0RBQXFCO3NDQUFDLElBQU0sS0FBTUksQ0FBQUEsVUFBVSxPQUFPLEtBQUssSUFBSUEsT0FBT08sSUFBSUcsT0FBTzs7UUFDOUUsT0FBTyxXQUFXLEdBQUVkLGdEQUFtQixDQUFDLFFBQVFELDhFQUFRQSxDQUFDO1lBQ3ZEWSxLQUFLQTtRQUNQLEdBQUdGLFFBQVEsV0FBVyxHQUFFVCxnREFBbUIsQ0FBQ0ssSUFBSTtZQUM5Q1ksUUFBUTtZQUNSVixNQUFNQTtRQUNSLElBQUlDO0lBQ047QUFDRjtBQUNBLE1BQU1VLE1BQU0sYUFBYSxHQUFFaEIsT0FBTztBQUNsQyxNQUFNaUIsU0FBUyxhQUFhLEdBQUVqQixPQUFPO0FBQ3JDLE1BQU1rQixPQUFPLGFBQWEsR0FBRWxCLE9BQU87QUFDbkMsTUFBTW1CLFdBQVcsYUFBYSxHQUFFbkIsT0FBTztBQUN2QyxNQUFNb0IsU0FBUyxhQUFhLEdBQUVwQixPQUFPO0FBQ3JDLE1BQU1xQixRQUFRLGFBQWEsR0FBRXJCLE9BQU87QUFDcEMsTUFBTXNCLE9BQU8sYUFBYSxHQUFFdEIsT0FBTztBQUNuQyxNQUFNdUIsUUFBUSxhQUFhLEdBQUV2QixPQUFPO0FBQ3BDLE1BQU13QixZQUFZLGFBQWEsR0FBRXhCLE9BQU87QUFDeEMsTUFBTXlCLGNBQWMsYUFBYSxHQUFFekIsT0FBTztBQUMxQyxNQUFNMEIsT0FBTyxhQUFhLEdBQUUxQixPQUFPO0FBQ25DLE1BQU0yQixhQUFhLGFBQWEsR0FBRTNCLE9BQU87QUFDekMsTUFBTTRCLGNBQWMsYUFBYSxHQUFFNUIsT0FBTztBQUMxQyxNQUFNNkIsYUFBYSxhQUFhLEdBQUU3QixPQUFPO0FBQ3pDLE1BQU04QixlQUFlLGFBQWEsR0FBRTlCLE9BQU87QUFDM0MsTUFBTStCLFVBQVUsYUFBYSxHQUFFL0IsT0FBTztBQUN0QyxNQUFNZ0MsUUFBUSxhQUFhLEdBQUVoQyxPQUFPO0FBQ3BDLE1BQU1pQyxVQUFVLGFBQWEsR0FBRWpDLE9BQU87QUFDdEMsTUFBTWtDLFFBQVEsYUFBYSxHQUFFbEMsT0FBTyxTQUFTLENBQUMsRUFDNUNtQyxRQUFRLEVBQ1Q7SUFDQyxpRUFBaUU7SUFDakUsNkVBQTZFO0lBQzdFLE1BQU1DLE1BQU1ELFNBQVNFLFVBQVUsQ0FBQ0MsUUFBUTtJQUN4QyxNQUFNQyxLQUFLLElBQUl4Qyx1Q0FBVSxHQUFHMEMsc0JBQXNCLENBQUNMO0lBQ25ELE1BQU1NLFNBQVMsSUFBSTNDLDBDQUFhO0lBQ2hDd0MsR0FBR0ssT0FBTyxDQUFDRjtJQUNYLE1BQU1HLEtBQUssRUFBRTtJQUNiLElBQUlDLElBQUksR0FDTkMsSUFBSSxHQUNKQyxJQUFJLEdBQ0pDLElBQUk7SUFDTixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSWQsSUFBSWUsS0FBSyxFQUFFRCxJQUFLO1FBQ2xDSixJQUFJVixJQUFJZ0IsSUFBSSxDQUFDRjtRQUNiSCxJQUFJWCxJQUFJaUIsSUFBSSxDQUFDSDtRQUNiRixJQUFJLENBQUNGLElBQUlQLEdBQUdlLEdBQUcsQ0FBQ1IsQ0FBQyxJQUFJSixPQUFPSSxDQUFDO1FBQzdCRyxJQUFJLENBQUNGLElBQUlSLEdBQUdlLEdBQUcsQ0FBQ1AsQ0FBQyxJQUFJTCxPQUFPSyxDQUFDO1FBQzdCRixHQUFHVSxJQUFJLENBQUNQLEdBQUdDO0lBQ2I7SUFDQWQsU0FBU3FCLFlBQVksQ0FBQyxNQUFNLElBQUl6RCx5REFBNEIsQ0FBQzhDLElBQUk7QUFDbkU7QUFFb0wiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVGF5bG9yXFxEZXNrdG9wXFxFYXJ0aE5ldFxcbm9kZV9tb2R1bGVzXFxAcmVhY3QtdGhyZWVcXGRyZWlcXGNvcmVcXHNoYXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XG5cbmZ1bmN0aW9uIGNyZWF0ZSh0eXBlLCBlZmZlY3QpIHtcbiAgY29uc3QgRWwgPSB0eXBlICsgJ0dlb21ldHJ5JztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKCh7XG4gICAgYXJncyxcbiAgICBjaGlsZHJlbixcbiAgICAuLi5wcm9wc1xuICB9LCBmcmVmKSA9PiB7XG4gICAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICAgIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoZnJlZiwgKCkgPT4gcmVmLmN1cnJlbnQpO1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB2b2lkIChlZmZlY3QgPT0gbnVsbCA/IHZvaWQgMCA6IGVmZmVjdChyZWYuY3VycmVudCkpKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJtZXNoXCIsIF9leHRlbmRzKHtcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgcHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChFbCwge1xuICAgICAgYXR0YWNoOiBcImdlb21ldHJ5XCIsXG4gICAgICBhcmdzOiBhcmdzXG4gICAgfSksIGNoaWxkcmVuKTtcbiAgfSk7XG59XG5jb25zdCBCb3ggPSAvKiBAX19QVVJFX18gKi9jcmVhdGUoJ2JveCcpO1xuY29uc3QgQ2lyY2xlID0gLyogQF9fUFVSRV9fICovY3JlYXRlKCdjaXJjbGUnKTtcbmNvbnN0IENvbmUgPSAvKiBAX19QVVJFX18gKi9jcmVhdGUoJ2NvbmUnKTtcbmNvbnN0IEN5bGluZGVyID0gLyogQF9fUFVSRV9fICovY3JlYXRlKCdjeWxpbmRlcicpO1xuY29uc3QgU3BoZXJlID0gLyogQF9fUFVSRV9fICovY3JlYXRlKCdzcGhlcmUnKTtcbmNvbnN0IFBsYW5lID0gLyogQF9fUFVSRV9fICovY3JlYXRlKCdwbGFuZScpO1xuY29uc3QgVHViZSA9IC8qIEBfX1BVUkVfXyAqL2NyZWF0ZSgndHViZScpO1xuY29uc3QgVG9ydXMgPSAvKiBAX19QVVJFX18gKi9jcmVhdGUoJ3RvcnVzJyk7XG5jb25zdCBUb3J1c0tub3QgPSAvKiBAX19QVVJFX18gKi9jcmVhdGUoJ3RvcnVzS25vdCcpO1xuY29uc3QgVGV0cmFoZWRyb24gPSAvKiBAX19QVVJFX18gKi9jcmVhdGUoJ3RldHJhaGVkcm9uJyk7XG5jb25zdCBSaW5nID0gLyogQF9fUFVSRV9fICovY3JlYXRlKCdyaW5nJyk7XG5jb25zdCBQb2x5aGVkcm9uID0gLyogQF9fUFVSRV9fICovY3JlYXRlKCdwb2x5aGVkcm9uJyk7XG5jb25zdCBJY29zYWhlZHJvbiA9IC8qIEBfX1BVUkVfXyAqL2NyZWF0ZSgnaWNvc2FoZWRyb24nKTtcbmNvbnN0IE9jdGFoZWRyb24gPSAvKiBAX19QVVJFX18gKi9jcmVhdGUoJ29jdGFoZWRyb24nKTtcbmNvbnN0IERvZGVjYWhlZHJvbiA9IC8qIEBfX1BVUkVfXyAqL2NyZWF0ZSgnZG9kZWNhaGVkcm9uJyk7XG5jb25zdCBFeHRydWRlID0gLyogQF9fUFVSRV9fICovY3JlYXRlKCdleHRydWRlJyk7XG5jb25zdCBMYXRoZSA9IC8qIEBfX1BVUkVfXyAqL2NyZWF0ZSgnbGF0aGUnKTtcbmNvbnN0IENhcHN1bGUgPSAvKiBAX19QVVJFX18gKi9jcmVhdGUoJ2NhcHN1bGUnKTtcbmNvbnN0IFNoYXBlID0gLyogQF9fUFVSRV9fICovY3JlYXRlKCdzaGFwZScsICh7XG4gIGdlb21ldHJ5XG59KSA9PiB7XG4gIC8vIENhbGN1bGF0ZSBVVnMgKGJ5IGh0dHBzOi8vZGlzY291cnNlLnRocmVlanMub3JnL3UvcHJpc29uZXI4NDkpXG4gIC8vIGh0dHBzOi8vZGlzY291cnNlLnRocmVlanMub3JnL3QvY3VzdG9tLXNoYXBlLWluLWltYWdlLW5vdC13b3JraW5nLzQ5MzQ4LzEwXG4gIGNvbnN0IHBvcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247XG4gIGNvbnN0IGIzID0gbmV3IFRIUkVFLkJveDMoKS5zZXRGcm9tQnVmZmVyQXR0cmlidXRlKHBvcyk7XG4gIGNvbnN0IGIzc2l6ZSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gIGIzLmdldFNpemUoYjNzaXplKTtcbiAgY29uc3QgdXYgPSBbXTtcbiAgbGV0IHggPSAwLFxuICAgIHkgPSAwLFxuICAgIHUgPSAwLFxuICAgIHYgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvcy5jb3VudDsgaSsrKSB7XG4gICAgeCA9IHBvcy5nZXRYKGkpO1xuICAgIHkgPSBwb3MuZ2V0WShpKTtcbiAgICB1ID0gKHggLSBiMy5taW4ueCkgLyBiM3NpemUueDtcbiAgICB2ID0gKHkgLSBiMy5taW4ueSkgLyBiM3NpemUueTtcbiAgICB1di5wdXNoKHUsIHYpO1xuICB9XG4gIGdlb21ldHJ5LnNldEF0dHJpYnV0ZSgndXYnLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSh1diwgMikpO1xufSk7XG5cbmV4cG9ydCB7IEJveCwgQ2Fwc3VsZSwgQ2lyY2xlLCBDb25lLCBDeWxpbmRlciwgRG9kZWNhaGVkcm9uLCBFeHRydWRlLCBJY29zYWhlZHJvbiwgTGF0aGUsIE9jdGFoZWRyb24sIFBsYW5lLCBQb2x5aGVkcm9uLCBSaW5nLCBTaGFwZSwgU3BoZXJlLCBUZXRyYWhlZHJvbiwgVG9ydXMsIFRvcnVzS25vdCwgVHViZSB9O1xuIl0sIm5hbWVzIjpbIl9leHRlbmRzIiwiUmVhY3QiLCJUSFJFRSIsImNyZWF0ZSIsInR5cGUiLCJlZmZlY3QiLCJFbCIsImZvcndhcmRSZWYiLCJhcmdzIiwiY2hpbGRyZW4iLCJwcm9wcyIsImZyZWYiLCJyZWYiLCJ1c2VSZWYiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwiY3VycmVudCIsInVzZUxheW91dEVmZmVjdCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRhY2giLCJCb3giLCJDaXJjbGUiLCJDb25lIiwiQ3lsaW5kZXIiLCJTcGhlcmUiLCJQbGFuZSIsIlR1YmUiLCJUb3J1cyIsIlRvcnVzS25vdCIsIlRldHJhaGVkcm9uIiwiUmluZyIsIlBvbHloZWRyb24iLCJJY29zYWhlZHJvbiIsIk9jdGFoZWRyb24iLCJEb2RlY2FoZWRyb24iLCJFeHRydWRlIiwiTGF0aGUiLCJDYXBzdWxlIiwiU2hhcGUiLCJnZW9tZXRyeSIsInBvcyIsImF0dHJpYnV0ZXMiLCJwb3NpdGlvbiIsImIzIiwiQm94MyIsInNldEZyb21CdWZmZXJBdHRyaWJ1dGUiLCJiM3NpemUiLCJWZWN0b3IzIiwiZ2V0U2l6ZSIsInV2IiwieCIsInkiLCJ1IiwidiIsImkiLCJjb3VudCIsImdldFgiLCJnZXRZIiwibWluIiwicHVzaCIsInNldEF0dHJpYnV0ZSIsIkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/core/shapes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/helpers/glsl/distort.vert.glsl.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@react-three/drei/helpers/glsl/distort.vert.glsl.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ distort)\n/* harmony export */ });\nvar distort = \"#define GLSLIFY 1\\nvec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}float snoise(vec3 v){const vec2 C=vec2(1.0/6.0,1.0/3.0);const vec4 D=vec4(0.0,0.5,1.0,2.0);vec3 i=floor(v+dot(v,C.yyy));vec3 x0=v-i+dot(i,C.xxx);vec3 g=step(x0.yzx,x0.xyz);vec3 l=1.0-g;vec3 i1=min(g.xyz,l.zxy);vec3 i2=max(g.xyz,l.zxy);vec3 x1=x0-i1+C.xxx;vec3 x2=x0-i2+C.yyy;vec3 x3=x0-D.yyy;i=mod289(i);vec4 p=permute(permute(permute(i.z+vec4(0.0,i1.z,i2.z,1.0))+i.y+vec4(0.0,i1.y,i2.y,1.0))+i.x+vec4(0.0,i1.x,i2.x,1.0));float n_=0.142857142857;vec3 ns=n_*D.wyz-D.xzx;vec4 j=p-49.0*floor(p*ns.z*ns.z);vec4 x_=floor(j*ns.z);vec4 y_=floor(j-7.0*x_);vec4 x=x_*ns.x+ns.yyyy;vec4 y=y_*ns.x+ns.yyyy;vec4 h=1.0-abs(x)-abs(y);vec4 b0=vec4(x.xy,y.xy);vec4 b1=vec4(x.zw,y.zw);vec4 s0=floor(b0)*2.0+1.0;vec4 s1=floor(b1)*2.0+1.0;vec4 sh=-step(h,vec4(0.0));vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;vec3 p0=vec3(a0.xy,h.x);vec3 p1=vec3(a0.zw,h.y);vec3 p2=vec3(a1.xy,h.z);vec3 p3=vec3(a1.zw,h.w);vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));p0*=norm.x;p1*=norm.y;p2*=norm.z;p3*=norm.w;vec4 m=max(0.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.0);m=m*m;return 42.0*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3)));}\"; // eslint-disable-line\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2RyZWkvaGVscGVycy9nbHNsL2Rpc3RvcnQudmVydC5nbHNsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxVQUFVLDI1Q0FBMjVDLHNCQUFzQjtBQUVqNkMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVGF5bG9yXFxEZXNrdG9wXFxFYXJ0aE5ldFxcbm9kZV9tb2R1bGVzXFxAcmVhY3QtdGhyZWVcXGRyZWlcXGhlbHBlcnNcXGdsc2xcXGRpc3RvcnQudmVydC5nbHNsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkaXN0b3J0ID0gXCIjZGVmaW5lIEdMU0xJRlkgMVxcbnZlYzMgbW9kMjg5KHZlYzMgeCl7cmV0dXJuIHgtZmxvb3IoeCooMS4wLzI4OS4wKSkqMjg5LjA7fXZlYzQgbW9kMjg5KHZlYzQgeCl7cmV0dXJuIHgtZmxvb3IoeCooMS4wLzI4OS4wKSkqMjg5LjA7fXZlYzQgcGVybXV0ZSh2ZWM0IHgpe3JldHVybiBtb2QyODkoKCh4KjM0LjApKzEuMCkqeCk7fXZlYzQgdGF5bG9ySW52U3FydCh2ZWM0IHIpe3JldHVybiAxLjc5Mjg0MjkxNDAwMTU5LTAuODUzNzM0NzIwOTUzMTQqcjt9ZmxvYXQgc25vaXNlKHZlYzMgdil7Y29uc3QgdmVjMiBDPXZlYzIoMS4wLzYuMCwxLjAvMy4wKTtjb25zdCB2ZWM0IEQ9dmVjNCgwLjAsMC41LDEuMCwyLjApO3ZlYzMgaT1mbG9vcih2K2RvdCh2LEMueXl5KSk7dmVjMyB4MD12LWkrZG90KGksQy54eHgpO3ZlYzMgZz1zdGVwKHgwLnl6eCx4MC54eXopO3ZlYzMgbD0xLjAtZzt2ZWMzIGkxPW1pbihnLnh5eixsLnp4eSk7dmVjMyBpMj1tYXgoZy54eXosbC56eHkpO3ZlYzMgeDE9eDAtaTErQy54eHg7dmVjMyB4Mj14MC1pMitDLnl5eTt2ZWMzIHgzPXgwLUQueXl5O2k9bW9kMjg5KGkpO3ZlYzQgcD1wZXJtdXRlKHBlcm11dGUocGVybXV0ZShpLnordmVjNCgwLjAsaTEueixpMi56LDEuMCkpK2kueSt2ZWM0KDAuMCxpMS55LGkyLnksMS4wKSkraS54K3ZlYzQoMC4wLGkxLngsaTIueCwxLjApKTtmbG9hdCBuXz0wLjE0Mjg1NzE0Mjg1Nzt2ZWMzIG5zPW5fKkQud3l6LUQueHp4O3ZlYzQgaj1wLTQ5LjAqZmxvb3IocCpucy56Km5zLnopO3ZlYzQgeF89Zmxvb3Ioaipucy56KTt2ZWM0IHlfPWZsb29yKGotNy4wKnhfKTt2ZWM0IHg9eF8qbnMueCtucy55eXl5O3ZlYzQgeT15Xypucy54K25zLnl5eXk7dmVjNCBoPTEuMC1hYnMoeCktYWJzKHkpO3ZlYzQgYjA9dmVjNCh4Lnh5LHkueHkpO3ZlYzQgYjE9dmVjNCh4Lnp3LHkuencpO3ZlYzQgczA9Zmxvb3IoYjApKjIuMCsxLjA7dmVjNCBzMT1mbG9vcihiMSkqMi4wKzEuMDt2ZWM0IHNoPS1zdGVwKGgsdmVjNCgwLjApKTt2ZWM0IGEwPWIwLnh6eXcrczAueHp5dypzaC54eHl5O3ZlYzQgYTE9YjEueHp5dytzMS54enl3KnNoLnp6d3c7dmVjMyBwMD12ZWMzKGEwLnh5LGgueCk7dmVjMyBwMT12ZWMzKGEwLnp3LGgueSk7dmVjMyBwMj12ZWMzKGExLnh5LGgueik7dmVjMyBwMz12ZWMzKGExLnp3LGgudyk7dmVjNCBub3JtPXRheWxvckludlNxcnQodmVjNChkb3QocDAscDApLGRvdChwMSxwMSksZG90KHAyLHAyKSxkb3QocDMscDMpKSk7cDAqPW5vcm0ueDtwMSo9bm9ybS55O3AyKj1ub3JtLno7cDMqPW5vcm0udzt2ZWM0IG09bWF4KDAuNi12ZWM0KGRvdCh4MCx4MCksZG90KHgxLHgxKSxkb3QoeDIseDIpLGRvdCh4Myx4MykpLDAuMCk7bT1tKm07cmV0dXJuIDQyLjAqZG90KG0qbSx2ZWM0KGRvdChwMCx4MCksZG90KHAxLHgxKSxkb3QocDIseDIpLGRvdChwMyx4MykpKTt9XCI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuZXhwb3J0IHsgZGlzdG9ydCBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsiZGlzdG9ydCIsImRlZmF1bHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/helpers/glsl/distort.vert.glsl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/dist/events-e3cb66e2.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@react-three/fiber/dist/events-e3cb66e2.esm.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ useStore),\n/* harmony export */   B: () => (/* binding */ Block),\n/* harmony export */   C: () => (/* binding */ useThree),\n/* harmony export */   D: () => (/* binding */ useFrame),\n/* harmony export */   E: () => (/* binding */ ErrorBoundary),\n/* harmony export */   F: () => (/* binding */ useGraph),\n/* harmony export */   G: () => (/* binding */ useLoader),\n/* harmony export */   _: () => (/* binding */ _roots),\n/* harmony export */   a: () => (/* binding */ useMutableCallback),\n/* harmony export */   b: () => (/* binding */ useIsomorphicLayoutEffect),\n/* harmony export */   c: () => (/* binding */ createRoot),\n/* harmony export */   d: () => (/* binding */ unmountComponentAtNode),\n/* harmony export */   e: () => (/* binding */ extend),\n/* harmony export */   f: () => (/* binding */ createPointerEvents),\n/* harmony export */   g: () => (/* binding */ createEvents),\n/* harmony export */   h: () => (/* binding */ flushGlobalEffects),\n/* harmony export */   i: () => (/* binding */ isRef),\n/* harmony export */   j: () => (/* binding */ addEffect),\n/* harmony export */   k: () => (/* binding */ addAfterEffect),\n/* harmony export */   l: () => (/* binding */ addTail),\n/* harmony export */   m: () => (/* binding */ invalidate),\n/* harmony export */   n: () => (/* binding */ advance),\n/* harmony export */   o: () => (/* binding */ createPortal),\n/* harmony export */   p: () => (/* binding */ flushSync),\n/* harmony export */   q: () => (/* binding */ context),\n/* harmony export */   r: () => (/* binding */ reconciler),\n/* harmony export */   s: () => (/* binding */ applyProps),\n/* harmony export */   t: () => (/* binding */ threeTypes),\n/* harmony export */   u: () => (/* binding */ useBridge),\n/* harmony export */   v: () => (/* binding */ getRootState),\n/* harmony export */   w: () => (/* binding */ dispose),\n/* harmony export */   x: () => (/* binding */ act),\n/* harmony export */   y: () => (/* binding */ buildGraph),\n/* harmony export */   z: () => (/* binding */ useInstanceHandle)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-reconciler/constants */ \"(ssr)/./node_modules/react-reconciler/constants.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.core.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var zustand_traditional__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zustand/traditional */ \"(ssr)/./node_modules/zustand/esm/traditional.mjs\");\n/* harmony import */ var suspend_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! suspend-react */ \"(ssr)/./node_modules/suspend-react/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-reconciler */ \"(ssr)/./node_modules/react-reconciler/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_reconciler__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! scheduler */ \"(ssr)/./node_modules/scheduler/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var its_fine__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! its-fine */ \"(ssr)/./node_modules/its-fine/dist/index.js\");\n\n\n\n\n\n\n\n\n\nvar threeTypes = /*#__PURE__*/ Object.freeze({\n    __proto__: null\n});\n/**\r\n * Returns the instance's initial (outmost) root.\r\n */ function findInitialRoot(instance) {\n    let root = instance.root;\n    while(root.getState().previousRoot)root = root.getState().previousRoot;\n    return root;\n}\n/**\r\n * Safely flush async effects when testing, simulating a legacy root.\r\n * @deprecated Import from React instead. import { act } from 'react'\r\n */ // Reference with computed key to break Webpack static analysis\n// https://github.com/webpack/webpack/issues/14814\nconst act = react__WEBPACK_IMPORTED_MODULE_0__['act' + ''];\nconst isOrthographicCamera = (def)=>def && def.isOrthographicCamera;\nconst isRef = (obj)=>obj && obj.hasOwnProperty('current');\nconst isColorRepresentation = (value)=>value != null && (typeof value === 'string' || typeof value === 'number' || value.isColor);\n/**\r\n * An SSR-friendly useLayoutEffect.\r\n *\r\n * React currently throws a warning when using useLayoutEffect on the server.\r\n * To get around it, we can conditionally useEffect on the server (no-op) and\r\n * useLayoutEffect elsewhere.\r\n *\r\n * @see https://github.com/facebook/react/issues/14927\r\n */ const useIsomorphicLayoutEffect = /* @__PURE__ */ ((_window$document, _window$navigator)=> false && (0))() ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction useMutableCallback(fn) {\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(fn);\n    useIsomorphicLayoutEffect({\n        \"useMutableCallback.useIsomorphicLayoutEffect\": ()=>void (ref.current = fn)\n    }[\"useMutableCallback.useIsomorphicLayoutEffect\"], [\n        fn\n    ]);\n    return ref;\n}\n/**\r\n * Bridges renderer Context and StrictMode from a primary renderer.\r\n */ function useBridge() {\n    const fiber = (0,its_fine__WEBPACK_IMPORTED_MODULE_5__.useFiber)();\n    const ContextBridge = (0,its_fine__WEBPACK_IMPORTED_MODULE_5__.useContextBridge)();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useBridge.useMemo\": ()=>({\n                \"useBridge.useMemo\": ({ children })=>{\n                    const strict = !!(0,its_fine__WEBPACK_IMPORTED_MODULE_5__.traverseFiber)(fiber, true, {\n                        \"useBridge.useMemo\": (node)=>node.type === react__WEBPACK_IMPORTED_MODULE_0__.StrictMode\n                    }[\"useBridge.useMemo\"]);\n                    const Root = strict ? react__WEBPACK_IMPORTED_MODULE_0__.StrictMode : react__WEBPACK_IMPORTED_MODULE_0__.Fragment;\n                    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Root, {\n                        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ContextBridge, {\n                            children: children\n                        })\n                    });\n                }\n            })[\"useBridge.useMemo\"]\n    }[\"useBridge.useMemo\"], [\n        fiber,\n        ContextBridge\n    ]);\n}\nfunction Block({ set }) {\n    useIsomorphicLayoutEffect({\n        \"Block.useIsomorphicLayoutEffect\": ()=>{\n            set(new Promise({\n                \"Block.useIsomorphicLayoutEffect\": ()=>null\n            }[\"Block.useIsomorphicLayoutEffect\"]));\n            return ({\n                \"Block.useIsomorphicLayoutEffect\": ()=>set(false)\n            })[\"Block.useIsomorphicLayoutEffect\"];\n        }\n    }[\"Block.useIsomorphicLayoutEffect\"], [\n        set\n    ]);\n    return null;\n}\n// NOTE: static members get down-level transpiled to mutations which break tree-shaking\nconst ErrorBoundary = /* @__PURE__ */ ((_ErrorBoundary)=>(_ErrorBoundary = class ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n        constructor(...args){\n            super(...args);\n            this.state = {\n                error: false\n            };\n        }\n        componentDidCatch(err) {\n            this.props.set(err);\n        }\n        render() {\n            return this.state.error ? null : this.props.children;\n        }\n    }, _ErrorBoundary.getDerivedStateFromError = ()=>({\n            error: true\n        }), _ErrorBoundary))();\nfunction calculateDpr(dpr) {\n    var _window$devicePixelRa;\n    // Err on the side of progress by assuming 2x dpr if we can't detect it\n    // This will happen in workers where window is defined but dpr isn't.\n    const target =  false ? 0 : 1;\n    return Array.isArray(dpr) ? Math.min(Math.max(dpr[0], target), dpr[1]) : dpr;\n}\n/**\r\n * Returns instance root state\r\n */ function getRootState(obj) {\n    var _r3f;\n    return (_r3f = obj.__r3f) == null ? void 0 : _r3f.root.getState();\n}\n// A collection of compare functions\nconst is = {\n    obj: (a)=>a === Object(a) && !is.arr(a) && typeof a !== 'function',\n    fun: (a)=>typeof a === 'function',\n    str: (a)=>typeof a === 'string',\n    num: (a)=>typeof a === 'number',\n    boo: (a)=>typeof a === 'boolean',\n    und: (a)=>a === void 0,\n    nul: (a)=>a === null,\n    arr: (a)=>Array.isArray(a),\n    equ (a, b, { arrays = 'shallow', objects = 'reference', strict = true } = {}) {\n        // Wrong type or one of the two undefined, doesn't match\n        if (typeof a !== typeof b || !!a !== !!b) return false;\n        // Atomic, just compare a against b\n        if (is.str(a) || is.num(a) || is.boo(a)) return a === b;\n        const isObj = is.obj(a);\n        if (isObj && objects === 'reference') return a === b;\n        const isArr = is.arr(a);\n        if (isArr && arrays === 'reference') return a === b;\n        // Array or Object, shallow compare first to see if it's a match\n        if ((isArr || isObj) && a === b) return true;\n        // Last resort, go through keys\n        let i;\n        // Check if a has all the keys of b\n        for(i in a)if (!(i in b)) return false;\n        // Check if values between keys match\n        if (isObj && arrays === 'shallow' && objects === 'shallow') {\n            for(i in strict ? b : a)if (!is.equ(a[i], b[i], {\n                strict,\n                objects: 'reference'\n            })) return false;\n        } else {\n            for(i in strict ? b : a)if (a[i] !== b[i]) return false;\n        }\n        // If i is undefined\n        if (is.und(i)) {\n            // If both arrays are empty we consider them equal\n            if (isArr && a.length === 0 && b.length === 0) return true;\n            // If both objects are empty we consider them equal\n            if (isObj && Object.keys(a).length === 0 && Object.keys(b).length === 0) return true;\n            // Otherwise match them by value\n            if (a !== b) return false;\n        }\n        return true;\n    }\n};\n// Collects nodes and materials from a THREE.Object3D\nfunction buildGraph(object) {\n    const data = {\n        nodes: {},\n        materials: {},\n        meshes: {}\n    };\n    if (object) {\n        object.traverse((obj)=>{\n            if (obj.name) data.nodes[obj.name] = obj;\n            if (obj.material && !data.materials[obj.material.name]) data.materials[obj.material.name] = obj.material;\n            if (obj.isMesh && !data.meshes[obj.name]) data.meshes[obj.name] = obj;\n        });\n    }\n    return data;\n}\n// Disposes an object and all its properties\nfunction dispose(obj) {\n    if (obj.type !== 'Scene') obj.dispose == null ? void 0 : obj.dispose();\n    for(const p in obj){\n        const prop = obj[p];\n        if ((prop == null ? void 0 : prop.type) !== 'Scene') prop == null ? void 0 : prop.dispose == null ? void 0 : prop.dispose();\n    }\n}\nconst REACT_INTERNAL_PROPS = [\n    'children',\n    'key',\n    'ref'\n];\n// Gets only instance props from reconciler fibers\nfunction getInstanceProps(queue) {\n    const props = {};\n    for(const key in queue){\n        if (!REACT_INTERNAL_PROPS.includes(key)) props[key] = queue[key];\n    }\n    return props;\n}\n// Each object in the scene carries a small LocalState descriptor\nfunction prepare(target, root, type, props) {\n    const object = target;\n    // Create instance descriptor\n    let instance = object == null ? void 0 : object.__r3f;\n    if (!instance) {\n        instance = {\n            root,\n            type,\n            parent: null,\n            children: [],\n            props: getInstanceProps(props),\n            object,\n            eventCount: 0,\n            handlers: {},\n            isHidden: false\n        };\n        if (object) object.__r3f = instance;\n    }\n    return instance;\n}\nfunction resolve(root, key) {\n    let target = root[key];\n    if (!key.includes('-')) return {\n        root,\n        key,\n        target\n    };\n    // Resolve pierced target\n    target = root;\n    for (const part of key.split('-')){\n        var _target;\n        key = part;\n        root = target;\n        target = (_target = target) == null ? void 0 : _target[key];\n    }\n    // TODO: change key to 'foo-bar' if target is undefined?\n    return {\n        root,\n        key,\n        target\n    };\n}\n// Checks if a dash-cased string ends with an integer\nconst INDEX_REGEX = /-\\d+$/;\nfunction attach(parent, child) {\n    if (is.str(child.props.attach)) {\n        // If attaching into an array (foo-0), create one\n        if (INDEX_REGEX.test(child.props.attach)) {\n            const index = child.props.attach.replace(INDEX_REGEX, '');\n            const { root, key } = resolve(parent.object, index);\n            if (!Array.isArray(root[key])) root[key] = [];\n        }\n        const { root, key } = resolve(parent.object, child.props.attach);\n        child.previousAttach = root[key];\n        root[key] = child.object;\n    } else if (is.fun(child.props.attach)) {\n        child.previousAttach = child.props.attach(parent.object, child.object);\n    }\n}\nfunction detach(parent, child) {\n    if (is.str(child.props.attach)) {\n        const { root, key } = resolve(parent.object, child.props.attach);\n        const previous = child.previousAttach;\n        // When the previous value was undefined, it means the value was never set to begin with\n        if (previous === undefined) delete root[key];\n        else root[key] = previous;\n    } else {\n        child.previousAttach == null ? void 0 : child.previousAttach(parent.object, child.object);\n    }\n    delete child.previousAttach;\n}\nconst RESERVED_PROPS = [\n    ...REACT_INTERNAL_PROPS,\n    // Instance props\n    'args',\n    'dispose',\n    'attach',\n    'object',\n    'onUpdate',\n    // Behavior flags\n    'dispose'\n];\nconst MEMOIZED_PROTOTYPES = new Map();\nfunction getMemoizedPrototype(root) {\n    let ctor = MEMOIZED_PROTOTYPES.get(root.constructor);\n    try {\n        if (!ctor) {\n            ctor = new root.constructor();\n            MEMOIZED_PROTOTYPES.set(root.constructor, ctor);\n        }\n    } catch (e) {\n    // ...\n    }\n    return ctor;\n}\n// This function prepares a set of changes to be applied to the instance\nfunction diffProps(instance, newProps) {\n    const changedProps = {};\n    // Sort through props\n    for(const prop in newProps){\n        // Skip reserved keys\n        if (RESERVED_PROPS.includes(prop)) continue;\n        // Skip if props match\n        if (is.equ(newProps[prop], instance.props[prop])) continue;\n        // Props changed, add them\n        changedProps[prop] = newProps[prop];\n        // Reset pierced props\n        for(const other in newProps){\n            if (other.startsWith(`${prop}-`)) changedProps[other] = newProps[other];\n        }\n    }\n    // Reset removed props for HMR\n    for(const prop in instance.props){\n        if (RESERVED_PROPS.includes(prop) || newProps.hasOwnProperty(prop)) continue;\n        const { root, key } = resolve(instance.object, prop);\n        // https://github.com/mrdoob/three.js/issues/21209\n        // HMR/fast-refresh relies on the ability to cancel out props, but threejs\n        // has no means to do this. Hence we curate a small collection of value-classes\n        // with their respective constructor/set arguments\n        // For removed props, try to set default values, if possible\n        if (root.constructor && root.constructor.length === 0) {\n            // create a blank slate of the instance and copy the particular parameter.\n            const ctor = getMemoizedPrototype(root);\n            if (!is.und(ctor)) changedProps[key] = ctor[key];\n        } else {\n            // instance does not have constructor, just set it to 0\n            changedProps[key] = 0;\n        }\n    }\n    return changedProps;\n}\n// https://github.com/mrdoob/three.js/pull/27042\n// https://github.com/mrdoob/three.js/pull/22748\nconst colorMaps = [\n    'map',\n    'emissiveMap',\n    'sheenColorMap',\n    'specularColorMap',\n    'envMap'\n];\nconst EVENT_REGEX = /^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/;\n// This function applies a set of changes to the instance\nfunction applyProps(object, props) {\n    var _instance$object;\n    const instance = object.__r3f;\n    const rootState = instance && findInitialRoot(instance).getState();\n    const prevHandlers = instance == null ? void 0 : instance.eventCount;\n    for(const prop in props){\n        let value = props[prop];\n        // Don't mutate reserved keys\n        if (RESERVED_PROPS.includes(prop)) continue;\n        // Deal with pointer events, including removing them if undefined\n        if (instance && EVENT_REGEX.test(prop)) {\n            if (typeof value === 'function') instance.handlers[prop] = value;\n            else delete instance.handlers[prop];\n            instance.eventCount = Object.keys(instance.handlers).length;\n            continue;\n        }\n        // Ignore setting undefined props\n        // https://github.com/pmndrs/react-three-fiber/issues/274\n        if (value === undefined) continue;\n        let { root, key, target } = resolve(object, prop);\n        // Layers must be written to the mask property\n        if (target instanceof three__WEBPACK_IMPORTED_MODULE_6__.Layers && value instanceof three__WEBPACK_IMPORTED_MODULE_6__.Layers) {\n            target.mask = value.mask;\n        } else if (target instanceof three__WEBPACK_IMPORTED_MODULE_6__.Color && isColorRepresentation(value)) {\n            target.set(value);\n        } else if (target !== null && typeof target === 'object' && typeof target.set === 'function' && typeof target.copy === 'function' && value != null && value.constructor && target.constructor === value.constructor) {\n            target.copy(value);\n        } else if (target !== null && typeof target === 'object' && typeof target.set === 'function' && Array.isArray(value)) {\n            if (typeof target.fromArray === 'function') target.fromArray(value);\n            else target.set(...value);\n        } else if (target !== null && typeof target === 'object' && typeof target.set === 'function' && typeof value === 'number') {\n            // Allow setting array scalars\n            if (typeof target.setScalar === 'function') target.setScalar(value);\n            else target.set(value);\n        } else {\n            var _root$key;\n            root[key] = value;\n            // Auto-convert sRGB texture parameters for built-in materials\n            // https://github.com/pmndrs/react-three-fiber/issues/344\n            // https://github.com/mrdoob/three.js/pull/25857\n            if (rootState && !rootState.linear && colorMaps.includes(key) && (_root$key = root[key]) != null && _root$key.isTexture && // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129\n            root[key].format === three__WEBPACK_IMPORTED_MODULE_6__.RGBAFormat && root[key].type === three__WEBPACK_IMPORTED_MODULE_6__.UnsignedByteType) {\n                // NOTE: this cannot be set from the renderer (e.g. sRGB source textures rendered to P3)\n                root[key].colorSpace = three__WEBPACK_IMPORTED_MODULE_6__.SRGBColorSpace;\n            }\n        }\n    }\n    // Register event handlers\n    if (instance != null && instance.parent && rootState != null && rootState.internal && (_instance$object = instance.object) != null && _instance$object.isObject3D && prevHandlers !== instance.eventCount) {\n        const object = instance.object;\n        // Pre-emptively remove the instance from the interaction manager\n        const index = rootState.internal.interaction.indexOf(object);\n        if (index > -1) rootState.internal.interaction.splice(index, 1);\n        // Add the instance to the interaction manager only when it has handlers\n        if (instance.eventCount && object.raycast !== null) {\n            rootState.internal.interaction.push(object);\n        }\n    }\n    // Auto-attach geometries and materials\n    if (instance && instance.props.attach === undefined) {\n        if (instance.object.isBufferGeometry) instance.props.attach = 'geometry';\n        else if (instance.object.isMaterial) instance.props.attach = 'material';\n    }\n    // Instance was updated, request a frame\n    if (instance) invalidateInstance(instance);\n    return object;\n}\nfunction invalidateInstance(instance) {\n    var _instance$root;\n    if (!instance.parent) return;\n    instance.props.onUpdate == null ? void 0 : instance.props.onUpdate(instance.object);\n    const state = (_instance$root = instance.root) == null ? void 0 : _instance$root.getState == null ? void 0 : _instance$root.getState();\n    if (state && state.internal.frames === 0) state.invalidate();\n}\nfunction updateCamera(camera, size) {\n    // Do not mess with the camera if it belongs to the user\n    // https://github.com/pmndrs/react-three-fiber/issues/92\n    if (camera.manual) return;\n    if (isOrthographicCamera(camera)) {\n        camera.left = size.width / -2;\n        camera.right = size.width / 2;\n        camera.top = size.height / 2;\n        camera.bottom = size.height / -2;\n    } else {\n        camera.aspect = size.width / size.height;\n    }\n    camera.updateProjectionMatrix();\n}\nconst isObject3D = (object)=>object == null ? void 0 : object.isObject3D;\nfunction makeId(event) {\n    return (event.eventObject || event.object).uuid + '/' + event.index + event.instanceId;\n}\n/**\r\n * Release pointer captures.\r\n * This is called by releasePointerCapture in the API, and when an object is removed.\r\n */ function releaseInternalPointerCapture(capturedMap, obj, captures, pointerId) {\n    const captureData = captures.get(obj);\n    if (captureData) {\n        captures.delete(obj);\n        // If this was the last capturing object for this pointer\n        if (captures.size === 0) {\n            capturedMap.delete(pointerId);\n            captureData.target.releasePointerCapture(pointerId);\n        }\n    }\n}\nfunction removeInteractivity(store, object) {\n    const { internal } = store.getState();\n    // Removes every trace of an object from the data store\n    internal.interaction = internal.interaction.filter((o)=>o !== object);\n    internal.initialHits = internal.initialHits.filter((o)=>o !== object);\n    internal.hovered.forEach((value, key)=>{\n        if (value.eventObject === object || value.object === object) {\n            // Clear out intersects, they are outdated by now\n            internal.hovered.delete(key);\n        }\n    });\n    internal.capturedMap.forEach((captures, pointerId)=>{\n        releaseInternalPointerCapture(internal.capturedMap, object, captures, pointerId);\n    });\n}\nfunction createEvents(store) {\n    /** Calculates delta */ function calculateDistance(event) {\n        const { internal } = store.getState();\n        const dx = event.offsetX - internal.initialClick[0];\n        const dy = event.offsetY - internal.initialClick[1];\n        return Math.round(Math.sqrt(dx * dx + dy * dy));\n    }\n    /** Returns true if an instance has a valid pointer-event registered, this excludes scroll, clicks etc */ function filterPointerEvents(objects) {\n        return objects.filter((obj)=>[\n                'Move',\n                'Over',\n                'Enter',\n                'Out',\n                'Leave'\n            ].some((name)=>{\n                var _r3f;\n                return (_r3f = obj.__r3f) == null ? void 0 : _r3f.handlers['onPointer' + name];\n            }));\n    }\n    function intersect(event, filter) {\n        const state = store.getState();\n        const duplicates = new Set();\n        const intersections = [];\n        // Allow callers to eliminate event objects\n        const eventsObjects = filter ? filter(state.internal.interaction) : state.internal.interaction;\n        // Reset all raycaster cameras to undefined\n        for(let i = 0; i < eventsObjects.length; i++){\n            const state = getRootState(eventsObjects[i]);\n            if (state) {\n                state.raycaster.camera = undefined;\n            }\n        }\n        if (!state.previousRoot) {\n            // Make sure root-level pointer and ray are set up\n            state.events.compute == null ? void 0 : state.events.compute(event, state);\n        }\n        function handleRaycast(obj) {\n            const state = getRootState(obj);\n            // Skip event handling when noEvents is set, or when the raycasters camera is null\n            if (!state || !state.events.enabled || state.raycaster.camera === null) return [];\n            // When the camera is undefined we have to call the event layers update function\n            if (state.raycaster.camera === undefined) {\n                var _state$previousRoot;\n                state.events.compute == null ? void 0 : state.events.compute(event, state, (_state$previousRoot = state.previousRoot) == null ? void 0 : _state$previousRoot.getState());\n                // If the camera is still undefined we have to skip this layer entirely\n                if (state.raycaster.camera === undefined) state.raycaster.camera = null;\n            }\n            // Intersect object by object\n            return state.raycaster.camera ? state.raycaster.intersectObject(obj, true) : [];\n        }\n        // Collect events\n        let hits = eventsObjects// Intersect objects\n        .flatMap(handleRaycast)// Sort by event priority and distance\n        .sort((a, b)=>{\n            const aState = getRootState(a.object);\n            const bState = getRootState(b.object);\n            if (!aState || !bState) return a.distance - b.distance;\n            return bState.events.priority - aState.events.priority || a.distance - b.distance;\n        })// Filter out duplicates\n        .filter((item)=>{\n            const id = makeId(item);\n            if (duplicates.has(id)) return false;\n            duplicates.add(id);\n            return true;\n        });\n        // https://github.com/mrdoob/three.js/issues/16031\n        // Allow custom userland intersect sort order, this likely only makes sense on the root filter\n        if (state.events.filter) hits = state.events.filter(hits, state);\n        // Bubble up the events, find the event source (eventObject)\n        for (const hit of hits){\n            let eventObject = hit.object;\n            // Bubble event up\n            while(eventObject){\n                var _r3f2;\n                if ((_r3f2 = eventObject.__r3f) != null && _r3f2.eventCount) intersections.push({\n                    ...hit,\n                    eventObject\n                });\n                eventObject = eventObject.parent;\n            }\n        }\n        // If the interaction is captured, make all capturing targets part of the intersect.\n        if ('pointerId' in event && state.internal.capturedMap.has(event.pointerId)) {\n            for (let captureData of state.internal.capturedMap.get(event.pointerId).values()){\n                if (!duplicates.has(makeId(captureData.intersection))) intersections.push(captureData.intersection);\n            }\n        }\n        return intersections;\n    }\n    /**  Handles intersections by forwarding them to handlers */ function handleIntersects(intersections, event, delta, callback) {\n        // If anything has been found, forward it to the event listeners\n        if (intersections.length) {\n            const localState = {\n                stopped: false\n            };\n            for (const hit of intersections){\n                let state = getRootState(hit.object);\n                // If the object is not managed by R3F, it might be parented to an element which is.\n                // Traverse upwards until we find a managed parent and use its state instead.\n                if (!state) {\n                    hit.object.traverseAncestors((obj)=>{\n                        const parentState = getRootState(obj);\n                        if (parentState) {\n                            state = parentState;\n                            return false;\n                        }\n                    });\n                }\n                if (state) {\n                    const { raycaster, pointer, camera, internal } = state;\n                    const unprojectedPoint = new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(pointer.x, pointer.y, 0).unproject(camera);\n                    const hasPointerCapture = (id)=>{\n                        var _internal$capturedMap, _internal$capturedMap2;\n                        return (_internal$capturedMap = (_internal$capturedMap2 = internal.capturedMap.get(id)) == null ? void 0 : _internal$capturedMap2.has(hit.eventObject)) != null ? _internal$capturedMap : false;\n                    };\n                    const setPointerCapture = (id)=>{\n                        const captureData = {\n                            intersection: hit,\n                            target: event.target\n                        };\n                        if (internal.capturedMap.has(id)) {\n                            // if the pointerId was previously captured, we add the hit to the\n                            // event capturedMap.\n                            internal.capturedMap.get(id).set(hit.eventObject, captureData);\n                        } else {\n                            // if the pointerId was not previously captured, we create a map\n                            // containing the hitObject, and the hit. hitObject is used for\n                            // faster access.\n                            internal.capturedMap.set(id, new Map([\n                                [\n                                    hit.eventObject,\n                                    captureData\n                                ]\n                            ]));\n                        }\n                        event.target.setPointerCapture(id);\n                    };\n                    const releasePointerCapture = (id)=>{\n                        const captures = internal.capturedMap.get(id);\n                        if (captures) {\n                            releaseInternalPointerCapture(internal.capturedMap, hit.eventObject, captures, id);\n                        }\n                    };\n                    // Add native event props\n                    let extractEventProps = {};\n                    // This iterates over the event's properties including the inherited ones. Native PointerEvents have most of their props as getters which are inherited, but polyfilled PointerEvents have them all as their own properties (i.e. not inherited). We can't use Object.keys() or Object.entries() as they only return \"own\" properties; nor Object.getPrototypeOf(event) as that *doesn't* return \"own\" properties, only inherited ones.\n                    for(let prop in event){\n                        let property = event[prop];\n                        // Only copy over atomics, leave functions alone as these should be\n                        // called as event.nativeEvent.fn()\n                        if (typeof property !== 'function') extractEventProps[prop] = property;\n                    }\n                    let raycastEvent = {\n                        ...hit,\n                        ...extractEventProps,\n                        pointer,\n                        intersections,\n                        stopped: localState.stopped,\n                        delta,\n                        unprojectedPoint,\n                        ray: raycaster.ray,\n                        camera: camera,\n                        // Hijack stopPropagation, which just sets a flag\n                        stopPropagation () {\n                            // https://github.com/pmndrs/react-three-fiber/issues/596\n                            // Events are not allowed to stop propagation if the pointer has been captured\n                            const capturesForPointer = 'pointerId' in event && internal.capturedMap.get(event.pointerId);\n                            // We only authorize stopPropagation...\n                            if (// ...if this pointer hasn't been captured\n                            !capturesForPointer || // ... or if the hit object is capturing the pointer\n                            capturesForPointer.has(hit.eventObject)) {\n                                raycastEvent.stopped = localState.stopped = true;\n                                // Propagation is stopped, remove all other hover records\n                                // An event handler is only allowed to flush other handlers if it is hovered itself\n                                if (internal.hovered.size && Array.from(internal.hovered.values()).find((i)=>i.eventObject === hit.eventObject)) {\n                                    // Objects cannot flush out higher up objects that have already caught the event\n                                    const higher = intersections.slice(0, intersections.indexOf(hit));\n                                    cancelPointer([\n                                        ...higher,\n                                        hit\n                                    ]);\n                                }\n                            }\n                        },\n                        // there should be a distinction between target and currentTarget\n                        target: {\n                            hasPointerCapture,\n                            setPointerCapture,\n                            releasePointerCapture\n                        },\n                        currentTarget: {\n                            hasPointerCapture,\n                            setPointerCapture,\n                            releasePointerCapture\n                        },\n                        nativeEvent: event\n                    };\n                    // Call subscribers\n                    callback(raycastEvent);\n                    // Event bubbling may be interrupted by stopPropagation\n                    if (localState.stopped === true) break;\n                }\n            }\n        }\n        return intersections;\n    }\n    function cancelPointer(intersections) {\n        const { internal } = store.getState();\n        for (const hoveredObj of internal.hovered.values()){\n            // When no objects were hit or the the hovered object wasn't found underneath the cursor\n            // we call onPointerOut and delete the object from the hovered-elements map\n            if (!intersections.length || !intersections.find((hit)=>hit.object === hoveredObj.object && hit.index === hoveredObj.index && hit.instanceId === hoveredObj.instanceId)) {\n                const eventObject = hoveredObj.eventObject;\n                const instance = eventObject.__r3f;\n                internal.hovered.delete(makeId(hoveredObj));\n                if (instance != null && instance.eventCount) {\n                    const handlers = instance.handlers;\n                    // Clear out intersects, they are outdated by now\n                    const data = {\n                        ...hoveredObj,\n                        intersections\n                    };\n                    handlers.onPointerOut == null ? void 0 : handlers.onPointerOut(data);\n                    handlers.onPointerLeave == null ? void 0 : handlers.onPointerLeave(data);\n                }\n            }\n        }\n    }\n    function pointerMissed(event, objects) {\n        for(let i = 0; i < objects.length; i++){\n            const instance = objects[i].__r3f;\n            instance == null ? void 0 : instance.handlers.onPointerMissed == null ? void 0 : instance.handlers.onPointerMissed(event);\n        }\n    }\n    function handlePointer(name) {\n        // Deal with cancelation\n        switch(name){\n            case 'onPointerLeave':\n            case 'onPointerCancel':\n                return ()=>cancelPointer([]);\n            case 'onLostPointerCapture':\n                return (event)=>{\n                    const { internal } = store.getState();\n                    if ('pointerId' in event && internal.capturedMap.has(event.pointerId)) {\n                        // If the object event interface had onLostPointerCapture, we'd call it here on every\n                        // object that's getting removed. We call it on the next frame because onLostPointerCapture\n                        // fires before onPointerUp. Otherwise pointerUp would never be called if the event didn't\n                        // happen in the object it originated from, leaving components in a in-between state.\n                        requestAnimationFrame(()=>{\n                            // Only release if pointer-up didn't do it already\n                            if (internal.capturedMap.has(event.pointerId)) {\n                                internal.capturedMap.delete(event.pointerId);\n                                cancelPointer([]);\n                            }\n                        });\n                    }\n                };\n        }\n        // Any other pointer goes here ...\n        return function handleEvent(event) {\n            const { onPointerMissed, internal } = store.getState();\n            // prepareRay(event)\n            internal.lastEvent.current = event;\n            // Get fresh intersects\n            const isPointerMove = name === 'onPointerMove';\n            const isClickEvent = name === 'onClick' || name === 'onContextMenu' || name === 'onDoubleClick';\n            const filter = isPointerMove ? filterPointerEvents : undefined;\n            const hits = intersect(event, filter);\n            const delta = isClickEvent ? calculateDistance(event) : 0;\n            // Save initial coordinates on pointer-down\n            if (name === 'onPointerDown') {\n                internal.initialClick = [\n                    event.offsetX,\n                    event.offsetY\n                ];\n                internal.initialHits = hits.map((hit)=>hit.eventObject);\n            }\n            // If a click yields no results, pass it back to the user as a miss\n            // Missed events have to come first in order to establish user-land side-effect clean up\n            if (isClickEvent && !hits.length) {\n                if (delta <= 2) {\n                    pointerMissed(event, internal.interaction);\n                    if (onPointerMissed) onPointerMissed(event);\n                }\n            }\n            // Take care of unhover\n            if (isPointerMove) cancelPointer(hits);\n            function onIntersect(data) {\n                const eventObject = data.eventObject;\n                const instance = eventObject.__r3f;\n                // Check presence of handlers\n                if (!(instance != null && instance.eventCount)) return;\n                const handlers = instance.handlers;\n                /*\r\n        MAYBE TODO, DELETE IF NOT: \r\n          Check if the object is captured, captured events should not have intersects running in parallel\r\n          But wouldn't it be better to just replace capturedMap with a single entry?\r\n          Also, are we OK with straight up making picking up multiple objects impossible?\r\n          \r\n        const pointerId = (data as ThreeEvent<PointerEvent>).pointerId        \r\n        if (pointerId !== undefined) {\r\n          const capturedMeshSet = internal.capturedMap.get(pointerId)\r\n          if (capturedMeshSet) {\r\n            const captured = capturedMeshSet.get(eventObject)\r\n            if (captured && captured.localState.stopped) return\r\n          }\r\n        }*/ if (isPointerMove) {\n                    // Move event ...\n                    if (handlers.onPointerOver || handlers.onPointerEnter || handlers.onPointerOut || handlers.onPointerLeave) {\n                        // When enter or out is present take care of hover-state\n                        const id = makeId(data);\n                        const hoveredItem = internal.hovered.get(id);\n                        if (!hoveredItem) {\n                            // If the object wasn't previously hovered, book it and call its handler\n                            internal.hovered.set(id, data);\n                            handlers.onPointerOver == null ? void 0 : handlers.onPointerOver(data);\n                            handlers.onPointerEnter == null ? void 0 : handlers.onPointerEnter(data);\n                        } else if (hoveredItem.stopped) {\n                            // If the object was previously hovered and stopped, we shouldn't allow other items to proceed\n                            data.stopPropagation();\n                        }\n                    }\n                    // Call mouse move\n                    handlers.onPointerMove == null ? void 0 : handlers.onPointerMove(data);\n                } else {\n                    // All other events ...\n                    const handler = handlers[name];\n                    if (handler) {\n                        // Forward all events back to their respective handlers with the exception of click events,\n                        // which must use the initial target\n                        if (!isClickEvent || internal.initialHits.includes(eventObject)) {\n                            // Missed events have to come first\n                            pointerMissed(event, internal.interaction.filter((object)=>!internal.initialHits.includes(object)));\n                            // Now call the handler\n                            handler(data);\n                        }\n                    } else {\n                        // Trigger onPointerMissed on all elements that have pointer over/out handlers, but not click and weren't hit\n                        if (isClickEvent && internal.initialHits.includes(eventObject)) {\n                            pointerMissed(event, internal.interaction.filter((object)=>!internal.initialHits.includes(object)));\n                        }\n                    }\n                }\n            }\n            handleIntersects(hits, event, delta, onIntersect);\n        };\n    }\n    return {\n        handlePointer\n    };\n}\nconst isRenderer = (def)=>!!(def != null && def.render);\nconst context = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nconst createStore = (invalidate, advance)=>{\n    const rootStore = (0,zustand_traditional__WEBPACK_IMPORTED_MODULE_7__.createWithEqualityFn)((set, get)=>{\n        const position = new three__WEBPACK_IMPORTED_MODULE_6__.Vector3();\n        const defaultTarget = new three__WEBPACK_IMPORTED_MODULE_6__.Vector3();\n        const tempTarget = new three__WEBPACK_IMPORTED_MODULE_6__.Vector3();\n        function getCurrentViewport(camera = get().camera, target = defaultTarget, size = get().size) {\n            const { width, height, top, left } = size;\n            const aspect = width / height;\n            if (target.isVector3) tempTarget.copy(target);\n            else tempTarget.set(...target);\n            const distance = camera.getWorldPosition(position).distanceTo(tempTarget);\n            if (isOrthographicCamera(camera)) {\n                return {\n                    width: width / camera.zoom,\n                    height: height / camera.zoom,\n                    top,\n                    left,\n                    factor: 1,\n                    distance,\n                    aspect\n                };\n            } else {\n                const fov = camera.fov * Math.PI / 180; // convert vertical fov to radians\n                const h = 2 * Math.tan(fov / 2) * distance; // visible height\n                const w = h * (width / height);\n                return {\n                    width: w,\n                    height: h,\n                    top,\n                    left,\n                    factor: width / w,\n                    distance,\n                    aspect\n                };\n            }\n        }\n        let performanceTimeout = undefined;\n        const setPerformanceCurrent = (current)=>set((state)=>({\n                    performance: {\n                        ...state.performance,\n                        current\n                    }\n                }));\n        const pointer = new three__WEBPACK_IMPORTED_MODULE_6__.Vector2();\n        const rootState = {\n            set,\n            get,\n            // Mock objects that have to be configured\n            gl: null,\n            camera: null,\n            raycaster: null,\n            events: {\n                priority: 1,\n                enabled: true,\n                connected: false\n            },\n            scene: null,\n            xr: null,\n            invalidate: (frames = 1)=>invalidate(get(), frames),\n            advance: (timestamp, runGlobalEffects)=>advance(timestamp, runGlobalEffects, get()),\n            legacy: false,\n            linear: false,\n            flat: false,\n            controls: null,\n            clock: new three__WEBPACK_IMPORTED_MODULE_6__.Clock(),\n            pointer,\n            mouse: pointer,\n            frameloop: 'always',\n            onPointerMissed: undefined,\n            performance: {\n                current: 1,\n                min: 0.5,\n                max: 1,\n                debounce: 200,\n                regress: ()=>{\n                    const state = get();\n                    // Clear timeout\n                    if (performanceTimeout) clearTimeout(performanceTimeout);\n                    // Set lower bound performance\n                    if (state.performance.current !== state.performance.min) setPerformanceCurrent(state.performance.min);\n                    // Go back to upper bound performance after a while unless something regresses meanwhile\n                    performanceTimeout = setTimeout(()=>setPerformanceCurrent(get().performance.max), state.performance.debounce);\n                }\n            },\n            size: {\n                width: 0,\n                height: 0,\n                top: 0,\n                left: 0\n            },\n            viewport: {\n                initialDpr: 0,\n                dpr: 0,\n                width: 0,\n                height: 0,\n                top: 0,\n                left: 0,\n                aspect: 0,\n                distance: 0,\n                factor: 0,\n                getCurrentViewport\n            },\n            setEvents: (events)=>set((state)=>({\n                        ...state,\n                        events: {\n                            ...state.events,\n                            ...events\n                        }\n                    })),\n            setSize: (width, height, top = 0, left = 0)=>{\n                const camera = get().camera;\n                const size = {\n                    width,\n                    height,\n                    top,\n                    left\n                };\n                set((state)=>({\n                        size,\n                        viewport: {\n                            ...state.viewport,\n                            ...getCurrentViewport(camera, defaultTarget, size)\n                        }\n                    }));\n            },\n            setDpr: (dpr)=>set((state)=>{\n                    const resolved = calculateDpr(dpr);\n                    return {\n                        viewport: {\n                            ...state.viewport,\n                            dpr: resolved,\n                            initialDpr: state.viewport.initialDpr || resolved\n                        }\n                    };\n                }),\n            setFrameloop: (frameloop = 'always')=>{\n                const clock = get().clock;\n                // if frameloop === \"never\" clock.elapsedTime is updated using advance(timestamp)\n                clock.stop();\n                clock.elapsedTime = 0;\n                if (frameloop !== 'never') {\n                    clock.start();\n                    clock.elapsedTime = 0;\n                }\n                set(()=>({\n                        frameloop\n                    }));\n            },\n            previousRoot: undefined,\n            internal: {\n                // Events\n                interaction: [],\n                hovered: new Map(),\n                subscribers: [],\n                initialClick: [\n                    0,\n                    0\n                ],\n                initialHits: [],\n                capturedMap: new Map(),\n                lastEvent: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef(),\n                // Updates\n                active: false,\n                frames: 0,\n                priority: 0,\n                subscribe: (ref, priority, store)=>{\n                    const internal = get().internal;\n                    // If this subscription was given a priority, it takes rendering into its own hands\n                    // For that reason we switch off automatic rendering and increase the manual flag\n                    // As long as this flag is positive there can be no internal rendering at all\n                    // because there could be multiple render subscriptions\n                    internal.priority = internal.priority + (priority > 0 ? 1 : 0);\n                    internal.subscribers.push({\n                        ref,\n                        priority,\n                        store\n                    });\n                    // Register subscriber and sort layers from lowest to highest, meaning,\n                    // highest priority renders last (on top of the other frames)\n                    internal.subscribers = internal.subscribers.sort((a, b)=>a.priority - b.priority);\n                    return ()=>{\n                        const internal = get().internal;\n                        if (internal != null && internal.subscribers) {\n                            // Decrease manual flag if this subscription had a priority\n                            internal.priority = internal.priority - (priority > 0 ? 1 : 0);\n                            // Remove subscriber from list\n                            internal.subscribers = internal.subscribers.filter((s)=>s.ref !== ref);\n                        }\n                    };\n                }\n            }\n        };\n        return rootState;\n    });\n    const state = rootStore.getState();\n    let oldSize = state.size;\n    let oldDpr = state.viewport.dpr;\n    let oldCamera = state.camera;\n    rootStore.subscribe(()=>{\n        const { camera, size, viewport, gl, set } = rootStore.getState();\n        // Resize camera and renderer on changes to size and pixelratio\n        if (size.width !== oldSize.width || size.height !== oldSize.height || viewport.dpr !== oldDpr) {\n            oldSize = size;\n            oldDpr = viewport.dpr;\n            // Update camera & renderer\n            updateCamera(camera, size);\n            if (viewport.dpr > 0) gl.setPixelRatio(viewport.dpr);\n            const updateStyle = typeof HTMLCanvasElement !== 'undefined' && gl.domElement instanceof HTMLCanvasElement;\n            gl.setSize(size.width, size.height, updateStyle);\n        }\n        // Update viewport once the camera changes\n        if (camera !== oldCamera) {\n            oldCamera = camera;\n            // Update viewport\n            set((state)=>({\n                    viewport: {\n                        ...state.viewport,\n                        ...state.viewport.getCurrentViewport(camera)\n                    }\n                }));\n        }\n    });\n    // Invalidate on any change\n    rootStore.subscribe((state)=>invalidate(state));\n    // Return root state\n    return rootStore;\n};\n/**\r\n * Exposes an object's {@link Instance}.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#useInstanceHandle\r\n *\r\n * **Note**: this is an escape hatch to react-internal fields. Expect this to change significantly between versions.\r\n */ function useInstanceHandle(ref) {\n    const instance = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle(instance, {\n        \"useInstanceHandle.useImperativeHandle\": ()=>ref.current.__r3f\n    }[\"useInstanceHandle.useImperativeHandle\"], [\n        ref\n    ]);\n    return instance;\n}\n/**\r\n * Returns the R3F Canvas' Zustand store. Useful for [transient updates](https://github.com/pmndrs/zustand#transient-updates-for-often-occurring-state-changes).\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#usestore\r\n */ function useStore() {\n    const store = react__WEBPACK_IMPORTED_MODULE_0__.useContext(context);\n    if (!store) throw new Error('R3F: Hooks can only be used within the Canvas component!');\n    return store;\n}\n/**\r\n * Accesses R3F's internal state, containing renderer, canvas, scene, etc.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#usethree\r\n */ function useThree(selector = (state)=>state, equalityFn) {\n    return useStore()(selector, equalityFn);\n}\n/**\r\n * Executes a callback before render in a shared frame loop.\r\n * Can order effects with render priority or manually render with a positive priority.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#useframe\r\n */ function useFrame(callback, renderPriority = 0) {\n    const store = useStore();\n    const subscribe = store.getState().internal.subscribe;\n    // Memoize ref\n    const ref = useMutableCallback(callback);\n    // Subscribe on mount, unsubscribe on unmount\n    useIsomorphicLayoutEffect({\n        \"useFrame.useIsomorphicLayoutEffect\": ()=>subscribe(ref, renderPriority, store)\n    }[\"useFrame.useIsomorphicLayoutEffect\"], [\n        renderPriority,\n        subscribe,\n        store\n    ]);\n    return null;\n}\n/**\r\n * Returns a node graph of an object with named nodes & materials.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#usegraph\r\n */ function useGraph(object) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"useGraph.useMemo\": ()=>buildGraph(object)\n    }[\"useGraph.useMemo\"], [\n        object\n    ]);\n}\nconst memoizedLoaders = new WeakMap();\nconst isConstructor$1 = (value)=>{\n    var _value$prototype;\n    return typeof value === 'function' && (value == null ? void 0 : (_value$prototype = value.prototype) == null ? void 0 : _value$prototype.constructor) === value;\n};\nfunction loadingFn(extensions, onProgress) {\n    return function(Proto, ...input) {\n        let loader;\n        // Construct and cache loader if constructor was passed\n        if (isConstructor$1(Proto)) {\n            loader = memoizedLoaders.get(Proto);\n            if (!loader) {\n                loader = new Proto();\n                memoizedLoaders.set(Proto, loader);\n            }\n        } else {\n            loader = Proto;\n        }\n        // Apply loader extensions\n        if (extensions) extensions(loader);\n        // Go through the urls and load them\n        return Promise.all(input.map((input)=>new Promise((res, reject)=>loader.load(input, (data)=>{\n                    if (isObject3D(data == null ? void 0 : data.scene)) Object.assign(data, buildGraph(data.scene));\n                    res(data);\n                }, onProgress, (error)=>reject(new Error(`Could not load ${input}: ${error == null ? void 0 : error.message}`))))));\n    };\n}\n/**\r\n * Synchronously loads and caches assets with a three loader.\r\n *\r\n * Note: this hook's caller must be wrapped with `React.Suspense`\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#useloader\r\n */ function useLoader(loader, input, extensions, onProgress) {\n    // Use suspense to load async assets\n    const keys = Array.isArray(input) ? input : [\n        input\n    ];\n    const results = (0,suspend_react__WEBPACK_IMPORTED_MODULE_8__.suspend)(loadingFn(extensions, onProgress), [\n        loader,\n        ...keys\n    ], {\n        equal: is.equ\n    });\n    // Return the object(s)\n    return Array.isArray(input) ? results : results[0];\n}\n/**\r\n * Preloads an asset into cache as a side-effect.\r\n */ useLoader.preload = function(loader, input, extensions) {\n    const keys = Array.isArray(input) ? input : [\n        input\n    ];\n    return (0,suspend_react__WEBPACK_IMPORTED_MODULE_8__.preload)(loadingFn(extensions), [\n        loader,\n        ...keys\n    ]);\n};\n/**\r\n * Removes a loaded asset from cache.\r\n */ useLoader.clear = function(loader, input) {\n    const keys = Array.isArray(input) ? input : [\n        input\n    ];\n    return (0,suspend_react__WEBPACK_IMPORTED_MODULE_8__.clear)([\n        loader,\n        ...keys\n    ]);\n};\nfunction createReconciler(config) {\n    const reconciler = react_reconciler__WEBPACK_IMPORTED_MODULE_2___default()(config);\n    reconciler.injectIntoDevTools({\n        bundleType: typeof process !== 'undefined' && \"development\" !== 'production' ? 1 : 0,\n        rendererPackageName: '@react-three/fiber',\n        version: react__WEBPACK_IMPORTED_MODULE_0__.version\n    });\n    return reconciler;\n}\nconst NoEventPriority = 0;\n// TODO: handle constructor overloads\n// https://github.com/pmndrs/react-three-fiber/pull/2931\n// https://github.com/microsoft/TypeScript/issues/37079\nconst catalogue = {};\nconst PREFIX_REGEX = /^three(?=[A-Z])/;\nconst toPascalCase = (type)=>`${type[0].toUpperCase()}${type.slice(1)}`;\nlet i = 0;\nconst isConstructor = (object)=>typeof object === 'function';\nfunction extend(objects) {\n    if (isConstructor(objects)) {\n        const Component = `${i++}`;\n        catalogue[Component] = objects;\n        return Component;\n    } else {\n        Object.assign(catalogue, objects);\n    }\n}\nfunction validateInstance(type, props) {\n    // Get target from catalogue\n    const name = toPascalCase(type);\n    const target = catalogue[name];\n    // Validate element target\n    if (type !== 'primitive' && !target) throw new Error(`R3F: ${name} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);\n    // Validate primitives\n    if (type === 'primitive' && !props.object) throw new Error(`R3F: Primitives without 'object' are invalid!`);\n    // Throw if an object or literal was passed for args\n    if (props.args !== undefined && !Array.isArray(props.args)) throw new Error('R3F: The args prop must be an array!');\n}\nfunction createInstance(type, props, root) {\n    var _props$object;\n    // Remove three* prefix from elements if native element not present\n    type = toPascalCase(type) in catalogue ? type : type.replace(PREFIX_REGEX, '');\n    validateInstance(type, props);\n    // Regenerate the R3F instance for primitives to simulate a new object\n    if (type === 'primitive' && (_props$object = props.object) != null && _props$object.__r3f) delete props.object.__r3f;\n    return prepare(props.object, root, type, props);\n}\nfunction hideInstance(instance) {\n    if (!instance.isHidden) {\n        var _instance$parent;\n        if (instance.props.attach && (_instance$parent = instance.parent) != null && _instance$parent.object) {\n            detach(instance.parent, instance);\n        } else if (isObject3D(instance.object)) {\n            instance.object.visible = false;\n        }\n        instance.isHidden = true;\n        invalidateInstance(instance);\n    }\n}\nfunction unhideInstance(instance) {\n    if (instance.isHidden) {\n        var _instance$parent2;\n        if (instance.props.attach && (_instance$parent2 = instance.parent) != null && _instance$parent2.object) {\n            attach(instance.parent, instance);\n        } else if (isObject3D(instance.object) && instance.props.visible !== false) {\n            instance.object.visible = true;\n        }\n        instance.isHidden = false;\n        invalidateInstance(instance);\n    }\n}\n// https://github.com/facebook/react/issues/20271\n// This will make sure events and attach are only handled once when trees are complete\nfunction handleContainerEffects(parent, child, beforeChild) {\n    // Bail if tree isn't mounted or parent is not a container.\n    // This ensures that the tree is finalized and React won't discard results to Suspense\n    const state = child.root.getState();\n    if (!parent.parent && parent.object !== state.scene) return;\n    // Create & link object on first run\n    if (!child.object) {\n        var _child$props$object, _child$props$args;\n        // Get target from catalogue\n        const target = catalogue[toPascalCase(child.type)];\n        // Create object\n        child.object = (_child$props$object = child.props.object) != null ? _child$props$object : new target(...(_child$props$args = child.props.args) != null ? _child$props$args : []);\n        child.object.__r3f = child;\n    }\n    // Set initial props\n    applyProps(child.object, child.props);\n    // Append instance\n    if (child.props.attach) {\n        attach(parent, child);\n    } else if (isObject3D(child.object) && isObject3D(parent.object)) {\n        const childIndex = parent.object.children.indexOf(beforeChild == null ? void 0 : beforeChild.object);\n        if (beforeChild && childIndex !== -1) {\n            // If the child is already in the parent's children array, move it to the new position\n            // Otherwise, just insert it at the target position\n            const existingIndex = parent.object.children.indexOf(child.object);\n            if (existingIndex !== -1) {\n                parent.object.children.splice(existingIndex, 1);\n                const adjustedIndex = existingIndex < childIndex ? childIndex - 1 : childIndex;\n                parent.object.children.splice(adjustedIndex, 0, child.object);\n            } else {\n                child.object.parent = parent.object;\n                parent.object.children.splice(childIndex, 0, child.object);\n                child.object.dispatchEvent({\n                    type: 'added'\n                });\n                parent.object.dispatchEvent({\n                    type: 'childadded',\n                    child: child.object\n                });\n            }\n        } else {\n            parent.object.add(child.object);\n        }\n    }\n    // Link subtree\n    for (const childInstance of child.children)handleContainerEffects(child, childInstance);\n    // Tree was updated, request a frame\n    invalidateInstance(child);\n}\nfunction appendChild(parent, child) {\n    if (!child) return;\n    // Link instances\n    child.parent = parent;\n    parent.children.push(child);\n    // Attach tree once complete\n    handleContainerEffects(parent, child);\n}\nfunction insertBefore(parent, child, beforeChild) {\n    if (!child || !beforeChild) return;\n    // Link instances\n    child.parent = parent;\n    const childIndex = parent.children.indexOf(beforeChild);\n    if (childIndex !== -1) parent.children.splice(childIndex, 0, child);\n    else parent.children.push(child);\n    // Attach tree once complete\n    handleContainerEffects(parent, child, beforeChild);\n}\nfunction disposeOnIdle(object) {\n    if (typeof object.dispose === 'function') {\n        const handleDispose = ()=>{\n            try {\n                object.dispose();\n            } catch  {\n            // no-op\n            }\n        };\n        // In a testing environment, cleanup immediately\n        if (typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined') handleDispose();\n        else (0,scheduler__WEBPACK_IMPORTED_MODULE_3__.unstable_scheduleCallback)(scheduler__WEBPACK_IMPORTED_MODULE_3__.unstable_IdlePriority, handleDispose);\n    }\n}\nfunction removeChild(parent, child, dispose) {\n    if (!child) return;\n    // Unlink instances\n    child.parent = null;\n    const childIndex = parent.children.indexOf(child);\n    if (childIndex !== -1) parent.children.splice(childIndex, 1);\n    // Eagerly tear down tree\n    if (child.props.attach) {\n        detach(parent, child);\n    } else if (isObject3D(child.object) && isObject3D(parent.object)) {\n        parent.object.remove(child.object);\n        removeInteractivity(findInitialRoot(child), child.object);\n    }\n    // Allow objects to bail out of unmount disposal with dispose={null}\n    const shouldDispose = child.props.dispose !== null && dispose !== false;\n    // Recursively remove instance children\n    for(let i = child.children.length - 1; i >= 0; i--){\n        const node = child.children[i];\n        removeChild(child, node, shouldDispose);\n    }\n    child.children.length = 0;\n    // Unlink instance object\n    delete child.object.__r3f;\n    // Dispose object whenever the reconciler feels like it.\n    // Never dispose of primitives because their state may be kept outside of React!\n    // In order for an object to be able to dispose it\n    //   - has a dispose method\n    //   - cannot be a <primitive object={...} />\n    //   - cannot be a THREE.Scene, because three has broken its own API\n    if (shouldDispose && child.type !== 'primitive' && child.object.type !== 'Scene') {\n        disposeOnIdle(child.object);\n    }\n    // Tree was updated, request a frame for top-level instance\n    if (dispose === undefined) invalidateInstance(child);\n}\nfunction setFiberRef(fiber, publicInstance) {\n    for (const _fiber of [\n        fiber,\n        fiber.alternate\n    ]){\n        if (_fiber !== null) {\n            if (typeof _fiber.ref === 'function') {\n                _fiber.refCleanup == null ? void 0 : _fiber.refCleanup();\n                const cleanup = _fiber.ref(publicInstance);\n                if (typeof cleanup === 'function') _fiber.refCleanup = cleanup;\n            } else if (_fiber.ref) {\n                _fiber.ref.current = publicInstance;\n            }\n        }\n    }\n}\nconst reconstructed = [];\nfunction swapInstances() {\n    // Detach instance\n    for (const [instance] of reconstructed){\n        const parent = instance.parent;\n        if (parent) {\n            if (instance.props.attach) {\n                detach(parent, instance);\n            } else if (isObject3D(instance.object) && isObject3D(parent.object)) {\n                parent.object.remove(instance.object);\n            }\n            for (const child of instance.children){\n                if (child.props.attach) {\n                    detach(instance, child);\n                } else if (isObject3D(child.object) && isObject3D(instance.object)) {\n                    instance.object.remove(child.object);\n                }\n            }\n        }\n        // If the old instance is hidden, we need to unhide it.\n        // React assumes it can discard instances since they're pure for DOM.\n        // This isn't true for us since our lifetimes are impure and longliving.\n        // So, we manually check if an instance was hidden and unhide it.\n        if (instance.isHidden) unhideInstance(instance);\n        // Dispose of old object if able\n        if (instance.object.__r3f) delete instance.object.__r3f;\n        if (instance.type !== 'primitive') disposeOnIdle(instance.object);\n    }\n    // Update instance\n    for (const [instance, props, fiber] of reconstructed){\n        instance.props = props;\n        const parent = instance.parent;\n        if (parent) {\n            var _instance$props$objec, _instance$props$args;\n            // Get target from catalogue\n            const target = catalogue[toPascalCase(instance.type)];\n            // Create object\n            instance.object = (_instance$props$objec = instance.props.object) != null ? _instance$props$objec : new target(...(_instance$props$args = instance.props.args) != null ? _instance$props$args : []);\n            instance.object.__r3f = instance;\n            setFiberRef(fiber, instance.object);\n            // Set initial props\n            applyProps(instance.object, instance.props);\n            if (instance.props.attach) {\n                attach(parent, instance);\n            } else if (isObject3D(instance.object) && isObject3D(parent.object)) {\n                parent.object.add(instance.object);\n            }\n            for (const child of instance.children){\n                if (child.props.attach) {\n                    attach(instance, child);\n                } else if (isObject3D(child.object) && isObject3D(instance.object)) {\n                    instance.object.add(child.object);\n                }\n            }\n            // Tree was updated, request a frame\n            invalidateInstance(instance);\n        }\n    }\n    reconstructed.length = 0;\n}\n// Don't handle text instances, make it no-op\nconst handleTextInstance = ()=>{};\nconst NO_CONTEXT = {};\nlet currentUpdatePriority = NoEventPriority;\n// https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberFlags.js\nconst NoFlags = 0;\nconst Update = 4;\nconst reconciler = /* @__PURE__ */ createReconciler({\n    isPrimaryRenderer: false,\n    warnsIfNotActing: false,\n    supportsMutation: true,\n    supportsPersistence: false,\n    supportsHydration: false,\n    createInstance,\n    removeChild,\n    appendChild,\n    appendInitialChild: appendChild,\n    insertBefore,\n    appendChildToContainer (container, child) {\n        const scene = container.getState().scene.__r3f;\n        if (!child || !scene) return;\n        appendChild(scene, child);\n    },\n    removeChildFromContainer (container, child) {\n        const scene = container.getState().scene.__r3f;\n        if (!child || !scene) return;\n        removeChild(scene, child);\n    },\n    insertInContainerBefore (container, child, beforeChild) {\n        const scene = container.getState().scene.__r3f;\n        if (!child || !beforeChild || !scene) return;\n        insertBefore(scene, child, beforeChild);\n    },\n    getRootHostContext: ()=>NO_CONTEXT,\n    getChildHostContext: ()=>NO_CONTEXT,\n    commitUpdate (instance, type, oldProps, newProps, fiber) {\n        var _newProps$args, _oldProps$args, _newProps$args2;\n        validateInstance(type, newProps);\n        let reconstruct = false;\n        // Reconstruct primitives if object prop changes\n        if (instance.type === 'primitive' && oldProps.object !== newProps.object) reconstruct = true;\n        else if (((_newProps$args = newProps.args) == null ? void 0 : _newProps$args.length) !== ((_oldProps$args = oldProps.args) == null ? void 0 : _oldProps$args.length)) reconstruct = true;\n        else if ((_newProps$args2 = newProps.args) != null && _newProps$args2.some((value, index)=>{\n            var _oldProps$args2;\n            return value !== ((_oldProps$args2 = oldProps.args) == null ? void 0 : _oldProps$args2[index]);\n        })) reconstruct = true;\n        // Reconstruct when args or <primitive object={...} have changes\n        if (reconstruct) {\n            reconstructed.push([\n                instance,\n                {\n                    ...newProps\n                },\n                fiber\n            ]);\n        } else {\n            // Create a diff-set, flag if there are any changes\n            const changedProps = diffProps(instance, newProps);\n            if (Object.keys(changedProps).length) {\n                Object.assign(instance.props, changedProps);\n                applyProps(instance.object, changedProps);\n            }\n        }\n        // Flush reconstructed siblings when we hit the last updated child in a sequence\n        const isTailSibling = fiber.sibling === null || (fiber.flags & Update) === NoFlags;\n        if (isTailSibling) swapInstances();\n    },\n    finalizeInitialChildren: ()=>false,\n    commitMount () {},\n    getPublicInstance: (instance)=>instance == null ? void 0 : instance.object,\n    prepareForCommit: ()=>null,\n    preparePortalMount: (container)=>prepare(container.getState().scene, container, '', {}),\n    resetAfterCommit: ()=>{},\n    shouldSetTextContent: ()=>false,\n    clearContainer: ()=>false,\n    hideInstance,\n    unhideInstance,\n    createTextInstance: handleTextInstance,\n    hideTextInstance: handleTextInstance,\n    unhideTextInstance: handleTextInstance,\n    scheduleTimeout: typeof setTimeout === 'function' ? setTimeout : undefined,\n    cancelTimeout: typeof clearTimeout === 'function' ? clearTimeout : undefined,\n    noTimeout: -1,\n    getInstanceFromNode: ()=>null,\n    beforeActiveInstanceBlur () {},\n    afterActiveInstanceBlur () {},\n    detachDeletedInstance () {},\n    prepareScopeUpdate () {},\n    getInstanceFromScope: ()=>null,\n    shouldAttemptEagerTransition: ()=>false,\n    trackSchedulerEvent: ()=>{},\n    resolveEventType: ()=>null,\n    resolveEventTimeStamp: ()=>-1.1,\n    requestPostPaintCallback () {},\n    maySuspendCommit: ()=>false,\n    preloadInstance: ()=>true,\n    // true indicates already loaded\n    startSuspendingCommit () {},\n    suspendInstance () {},\n    waitForCommitToBeReady: ()=>null,\n    NotPendingTransition: null,\n    // The reconciler types use the internal ReactContext with all the hidden properties\n    // so we have to cast from the public React.Context type\n    HostTransitionContext: /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null),\n    setCurrentUpdatePriority (newPriority) {\n        currentUpdatePriority = newPriority;\n    },\n    getCurrentUpdatePriority () {\n        return currentUpdatePriority;\n    },\n    resolveUpdatePriority () {\n        var _window$event;\n        if (currentUpdatePriority !== NoEventPriority) return currentUpdatePriority;\n        switch( false && (0)){\n            case 'click':\n            case 'contextmenu':\n            case 'dblclick':\n            case 'pointercancel':\n            case 'pointerdown':\n            case 'pointerup':\n                return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DiscreteEventPriority;\n            case 'pointermove':\n            case 'pointerout':\n            case 'pointerover':\n            case 'pointerenter':\n            case 'pointerleave':\n            case 'wheel':\n                return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.ContinuousEventPriority;\n            default:\n                return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DefaultEventPriority;\n        }\n    },\n    resetFormInstance () {}\n});\nconst _roots = new Map();\nconst shallowLoose = {\n    objects: 'shallow',\n    strict: false\n};\nfunction computeInitialSize(canvas, size) {\n    if (!size && typeof HTMLCanvasElement !== 'undefined' && canvas instanceof HTMLCanvasElement && canvas.parentElement) {\n        const { width, height, top, left } = canvas.parentElement.getBoundingClientRect();\n        return {\n            width,\n            height,\n            top,\n            left\n        };\n    } else if (!size && typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return {\n            width: canvas.width,\n            height: canvas.height,\n            top: 0,\n            left: 0\n        };\n    }\n    return {\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        ...size\n    };\n}\nfunction createRoot(canvas) {\n    // Check against mistaken use of createRoot\n    const prevRoot = _roots.get(canvas);\n    const prevFiber = prevRoot == null ? void 0 : prevRoot.fiber;\n    const prevStore = prevRoot == null ? void 0 : prevRoot.store;\n    if (prevRoot) console.warn('R3F.createRoot should only be called once!');\n    // Report when an error was detected in a previous render\n    // https://github.com/pmndrs/react-three-fiber/pull/2261\n    const logRecoverableError = typeof reportError === 'function' ? // In modern browsers, reportError will dispatch an error event,\n    // emulating an uncaught JavaScript error.\n    reportError : // In older browsers and test environments, fallback to console.error.\n    console.error;\n    // Create store\n    const store = prevStore || createStore(invalidate, advance);\n    // Create renderer\n    const fiber = prevFiber || reconciler.createContainer(store, // container\n    react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.ConcurrentRoot, // tag\n    null, // hydration callbacks\n    false, // isStrictMode\n    null, // concurrentUpdatesByDefaultOverride\n    '', // identifierPrefix\n    logRecoverableError, // onUncaughtError\n    logRecoverableError, // onCaughtError\n    logRecoverableError, // onRecoverableError\n    null // transitionCallbacks\n    );\n    // Map it\n    if (!prevRoot) _roots.set(canvas, {\n        fiber,\n        store\n    });\n    // Locals\n    let onCreated;\n    let lastCamera;\n    let configured = false;\n    let pending = null;\n    return {\n        async configure (props = {}) {\n            let resolve;\n            pending = new Promise((_resolve)=>resolve = _resolve);\n            let { gl: glConfig, size: propsSize, scene: sceneOptions, events, onCreated: onCreatedCallback, shadows = false, linear = false, flat = false, legacy = false, orthographic = false, frameloop = 'always', dpr = [\n                1,\n                2\n            ], performance, raycaster: raycastOptions, camera: cameraOptions, onPointerMissed } = props;\n            let state = store.getState();\n            // Set up renderer (one time only!)\n            let gl = state.gl;\n            if (!state.gl) {\n                const defaultProps = {\n                    canvas: canvas,\n                    powerPreference: 'high-performance',\n                    antialias: true,\n                    alpha: true\n                };\n                const customRenderer = typeof glConfig === 'function' ? await glConfig(defaultProps) : glConfig;\n                if (isRenderer(customRenderer)) {\n                    gl = customRenderer;\n                } else {\n                    gl = new three__WEBPACK_IMPORTED_MODULE_9__.WebGLRenderer({\n                        ...defaultProps,\n                        ...glConfig\n                    });\n                }\n                state.set({\n                    gl\n                });\n            }\n            // Set up raycaster (one time only!)\n            let raycaster = state.raycaster;\n            if (!raycaster) state.set({\n                raycaster: raycaster = new three__WEBPACK_IMPORTED_MODULE_6__.Raycaster()\n            });\n            // Set raycaster options\n            const { params, ...options } = raycastOptions || {};\n            if (!is.equ(options, raycaster, shallowLoose)) applyProps(raycaster, {\n                ...options\n            });\n            if (!is.equ(params, raycaster.params, shallowLoose)) applyProps(raycaster, {\n                params: {\n                    ...raycaster.params,\n                    ...params\n                }\n            });\n            // Create default camera, don't overwrite any user-set state\n            if (!state.camera || state.camera === lastCamera && !is.equ(lastCamera, cameraOptions, shallowLoose)) {\n                lastCamera = cameraOptions;\n                const isCamera = cameraOptions == null ? void 0 : cameraOptions.isCamera;\n                const camera = isCamera ? cameraOptions : orthographic ? new three__WEBPACK_IMPORTED_MODULE_6__.OrthographicCamera(0, 0, 0, 0, 0.1, 1000) : new three__WEBPACK_IMPORTED_MODULE_6__.PerspectiveCamera(75, 0, 0.1, 1000);\n                if (!isCamera) {\n                    camera.position.z = 5;\n                    if (cameraOptions) {\n                        applyProps(camera, cameraOptions);\n                        // Preserve user-defined frustum if possible\n                        // https://github.com/pmndrs/react-three-fiber/issues/3160\n                        if (!camera.manual) {\n                            if ('aspect' in cameraOptions || 'left' in cameraOptions || 'right' in cameraOptions || 'bottom' in cameraOptions || 'top' in cameraOptions) {\n                                camera.manual = true;\n                                camera.updateProjectionMatrix();\n                            }\n                        }\n                    }\n                    // Always look at center by default\n                    if (!state.camera && !(cameraOptions != null && cameraOptions.rotation)) camera.lookAt(0, 0, 0);\n                }\n                state.set({\n                    camera\n                });\n                // Configure raycaster\n                // https://github.com/pmndrs/react-xr/issues/300\n                raycaster.camera = camera;\n            }\n            // Set up scene (one time only!)\n            if (!state.scene) {\n                let scene;\n                if (sceneOptions != null && sceneOptions.isScene) {\n                    scene = sceneOptions;\n                    prepare(scene, store, '', {});\n                } else {\n                    scene = new three__WEBPACK_IMPORTED_MODULE_6__.Scene();\n                    prepare(scene, store, '', {});\n                    if (sceneOptions) applyProps(scene, sceneOptions);\n                }\n                state.set({\n                    scene\n                });\n            }\n            // Store events internally\n            if (events && !state.events.handlers) state.set({\n                events: events(store)\n            });\n            // Check size, allow it to take on container bounds initially\n            const size = computeInitialSize(canvas, propsSize);\n            if (!is.equ(size, state.size, shallowLoose)) {\n                state.setSize(size.width, size.height, size.top, size.left);\n            }\n            // Check pixelratio\n            if (dpr && state.viewport.dpr !== calculateDpr(dpr)) state.setDpr(dpr);\n            // Check frameloop\n            if (state.frameloop !== frameloop) state.setFrameloop(frameloop);\n            // Check pointer missed\n            if (!state.onPointerMissed) state.set({\n                onPointerMissed\n            });\n            // Check performance\n            if (performance && !is.equ(performance, state.performance, shallowLoose)) state.set((state)=>({\n                    performance: {\n                        ...state.performance,\n                        ...performance\n                    }\n                }));\n            // Set up XR (one time only!)\n            if (!state.xr) {\n                var _gl$xr;\n                // Handle frame behavior in WebXR\n                const handleXRFrame = (timestamp, frame)=>{\n                    const state = store.getState();\n                    if (state.frameloop === 'never') return;\n                    advance(timestamp, true, state, frame);\n                };\n                // Toggle render switching on session\n                const handleSessionChange = ()=>{\n                    const state = store.getState();\n                    state.gl.xr.enabled = state.gl.xr.isPresenting;\n                    state.gl.xr.setAnimationLoop(state.gl.xr.isPresenting ? handleXRFrame : null);\n                    if (!state.gl.xr.isPresenting) invalidate(state);\n                };\n                // WebXR session manager\n                const xr = {\n                    connect () {\n                        const gl = store.getState().gl;\n                        gl.xr.addEventListener('sessionstart', handleSessionChange);\n                        gl.xr.addEventListener('sessionend', handleSessionChange);\n                    },\n                    disconnect () {\n                        const gl = store.getState().gl;\n                        gl.xr.removeEventListener('sessionstart', handleSessionChange);\n                        gl.xr.removeEventListener('sessionend', handleSessionChange);\n                    }\n                };\n                // Subscribe to WebXR session events\n                if (typeof ((_gl$xr = gl.xr) == null ? void 0 : _gl$xr.addEventListener) === 'function') xr.connect();\n                state.set({\n                    xr\n                });\n            }\n            // Set shadowmap\n            if (gl.shadowMap) {\n                const oldEnabled = gl.shadowMap.enabled;\n                const oldType = gl.shadowMap.type;\n                gl.shadowMap.enabled = !!shadows;\n                if (is.boo(shadows)) {\n                    gl.shadowMap.type = three__WEBPACK_IMPORTED_MODULE_6__.PCFSoftShadowMap;\n                } else if (is.str(shadows)) {\n                    var _types$shadows;\n                    const types = {\n                        basic: three__WEBPACK_IMPORTED_MODULE_6__.BasicShadowMap,\n                        percentage: three__WEBPACK_IMPORTED_MODULE_6__.PCFShadowMap,\n                        soft: three__WEBPACK_IMPORTED_MODULE_6__.PCFSoftShadowMap,\n                        variance: three__WEBPACK_IMPORTED_MODULE_6__.VSMShadowMap\n                    };\n                    gl.shadowMap.type = (_types$shadows = types[shadows]) != null ? _types$shadows : three__WEBPACK_IMPORTED_MODULE_6__.PCFSoftShadowMap;\n                } else if (is.obj(shadows)) {\n                    Object.assign(gl.shadowMap, shadows);\n                }\n                if (oldEnabled !== gl.shadowMap.enabled || oldType !== gl.shadowMap.type) gl.shadowMap.needsUpdate = true;\n            }\n            three__WEBPACK_IMPORTED_MODULE_6__.ColorManagement.enabled = !legacy;\n            // Set color space and tonemapping preferences\n            if (!configured) {\n                gl.outputColorSpace = linear ? three__WEBPACK_IMPORTED_MODULE_6__.LinearSRGBColorSpace : three__WEBPACK_IMPORTED_MODULE_6__.SRGBColorSpace;\n                gl.toneMapping = flat ? three__WEBPACK_IMPORTED_MODULE_6__.NoToneMapping : three__WEBPACK_IMPORTED_MODULE_6__.ACESFilmicToneMapping;\n            }\n            // Update color management state\n            if (state.legacy !== legacy) state.set(()=>({\n                    legacy\n                }));\n            if (state.linear !== linear) state.set(()=>({\n                    linear\n                }));\n            if (state.flat !== flat) state.set(()=>({\n                    flat\n                }));\n            // Set gl props\n            if (glConfig && !is.fun(glConfig) && !isRenderer(glConfig) && !is.equ(glConfig, gl, shallowLoose)) applyProps(gl, glConfig);\n            // Set locals\n            onCreated = onCreatedCallback;\n            configured = true;\n            resolve();\n            return this;\n        },\n        render (children) {\n            // The root has to be configured before it can be rendered\n            if (!configured && !pending) this.configure();\n            pending.then(()=>{\n                reconciler.updateContainer(/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Provider, {\n                    store: store,\n                    children: children,\n                    onCreated: onCreated,\n                    rootElement: canvas\n                }), fiber, null, ()=>undefined);\n            });\n            return store;\n        },\n        unmount () {\n            unmountComponentAtNode(canvas);\n        }\n    };\n}\nfunction Provider({ store, children, onCreated, rootElement }) {\n    useIsomorphicLayoutEffect({\n        \"Provider.useIsomorphicLayoutEffect\": ()=>{\n            const state = store.getState();\n            // Flag the canvas active, rendering will now begin\n            state.set({\n                \"Provider.useIsomorphicLayoutEffect\": (state)=>({\n                        internal: {\n                            ...state.internal,\n                            active: true\n                        }\n                    })\n            }[\"Provider.useIsomorphicLayoutEffect\"]);\n            // Notify that init is completed, the scene graph exists, but nothing has yet rendered\n            if (onCreated) onCreated(state);\n            // Connect events to the targets parent, this is done to ensure events are registered on\n            // a shared target, and not on the canvas itself\n            if (!store.getState().events.connected) state.events.connect == null ? void 0 : state.events.connect(rootElement);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"Provider.useIsomorphicLayoutEffect\"], []);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(context.Provider, {\n        value: store,\n        children: children\n    });\n}\nfunction unmountComponentAtNode(canvas, callback) {\n    const root = _roots.get(canvas);\n    const fiber = root == null ? void 0 : root.fiber;\n    if (fiber) {\n        const state = root == null ? void 0 : root.store.getState();\n        if (state) state.internal.active = false;\n        reconciler.updateContainer(null, fiber, null, ()=>{\n            if (state) {\n                setTimeout(()=>{\n                    try {\n                        var _state$gl, _state$gl$renderLists, _state$gl2, _state$gl3;\n                        state.events.disconnect == null ? void 0 : state.events.disconnect();\n                        (_state$gl = state.gl) == null ? void 0 : (_state$gl$renderLists = _state$gl.renderLists) == null ? void 0 : _state$gl$renderLists.dispose == null ? void 0 : _state$gl$renderLists.dispose();\n                        (_state$gl2 = state.gl) == null ? void 0 : _state$gl2.forceContextLoss == null ? void 0 : _state$gl2.forceContextLoss();\n                        if ((_state$gl3 = state.gl) != null && _state$gl3.xr) state.xr.disconnect();\n                        dispose(state.scene);\n                        _roots.delete(canvas);\n                        if (callback) callback(canvas);\n                    } catch (e) {\n                    /* ... */ }\n                }, 500);\n            }\n        });\n    }\n}\nfunction createPortal(children, container, state) {\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Portal, {\n        children: children,\n        container: container,\n        state: state\n    });\n}\nfunction Portal({ state = {}, children, container }) {\n    /** This has to be a component because it would not be able to call useThree/useStore otherwise since\r\n   *  if this is our environment, then we are not in r3f's renderer but in react-dom, it would trigger\r\n   *  the \"R3F hooks can only be used within the Canvas component!\" warning:\r\n   *  <Canvas>\r\n   *    {createPortal(...)} */ const { events, size, ...rest } = state;\n    const previousRoot = useStore();\n    const [raycaster] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        \"Portal.useState\": ()=>new three__WEBPACK_IMPORTED_MODULE_6__.Raycaster()\n    }[\"Portal.useState\"]);\n    const [pointer] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        \"Portal.useState\": ()=>new three__WEBPACK_IMPORTED_MODULE_6__.Vector2()\n    }[\"Portal.useState\"]);\n    const inject = useMutableCallback({\n        \"Portal.useMutableCallback[inject]\": (rootState, injectState)=>{\n            let viewport = undefined;\n            if (injectState.camera && size) {\n                const camera = injectState.camera;\n                // Calculate the override viewport, if present\n                viewport = rootState.viewport.getCurrentViewport(camera, new three__WEBPACK_IMPORTED_MODULE_6__.Vector3(), size);\n                // Update the portal camera, if it differs from the previous layer\n                if (camera !== rootState.camera) updateCamera(camera, size);\n            }\n            return {\n                // The intersect consists of the previous root state\n                ...rootState,\n                ...injectState,\n                // Portals have their own scene, which forms the root, a raycaster and a pointer\n                scene: container,\n                raycaster,\n                pointer,\n                mouse: pointer,\n                // Their previous root is the layer before it\n                previousRoot,\n                // Events, size and viewport can be overridden by the inject layer\n                events: {\n                    ...rootState.events,\n                    ...injectState.events,\n                    ...events\n                },\n                size: {\n                    ...rootState.size,\n                    ...size\n                },\n                viewport: {\n                    ...rootState.viewport,\n                    ...viewport\n                },\n                // Layers are allowed to override events\n                setEvents: ({\n                    \"Portal.useMutableCallback[inject]\": (events)=>injectState.set({\n                            \"Portal.useMutableCallback[inject]\": (state)=>({\n                                    ...state,\n                                    events: {\n                                        ...state.events,\n                                        ...events\n                                    }\n                                })\n                        }[\"Portal.useMutableCallback[inject]\"])\n                })[\"Portal.useMutableCallback[inject]\"]\n            };\n        }\n    }[\"Portal.useMutableCallback[inject]\"]);\n    const usePortalStore = react__WEBPACK_IMPORTED_MODULE_0__.useMemo({\n        \"Portal.useMemo[usePortalStore]\": ()=>{\n            // Create a mirrored store, based on the previous root with a few overrides ...\n            const store = (0,zustand_traditional__WEBPACK_IMPORTED_MODULE_7__.createWithEqualityFn)({\n                \"Portal.useMemo[usePortalStore].store\": (set, get)=>({\n                        ...rest,\n                        set,\n                        get\n                    })\n            }[\"Portal.useMemo[usePortalStore].store\"]);\n            // Subscribe to previous root-state and copy changes over to the mirrored portal-state\n            const onMutate = {\n                \"Portal.useMemo[usePortalStore].onMutate\": (prev)=>store.setState({\n                        \"Portal.useMemo[usePortalStore].onMutate\": (state)=>inject.current(prev, state)\n                    }[\"Portal.useMemo[usePortalStore].onMutate\"])\n            }[\"Portal.useMemo[usePortalStore].onMutate\"];\n            onMutate(previousRoot.getState());\n            previousRoot.subscribe(onMutate);\n            return store;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        }\n    }[\"Portal.useMemo[usePortalStore]\"], [\n        previousRoot,\n        container\n    ]);\n    return(/*#__PURE__*/ // @ts-ignore, reconciler types are not maintained\n    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: reconciler.createPortal(/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(context.Provider, {\n            value: usePortalStore,\n            children: children\n        }), usePortalStore, null)\n    }));\n}\n/**\r\n * Force React to flush any updates inside the provided callback synchronously and immediately.\r\n * All the same caveats documented for react-dom's `flushSync` apply here (see https://react.dev/reference/react-dom/flushSync).\r\n * Nevertheless, sometimes one needs to render synchronously, for example to keep DOM and 3D changes in lock-step without\r\n * having to revert to a non-React solution. Note: this will only flush updates within the `Canvas` root.\r\n */ function flushSync(fn) {\n    // @ts-ignore - reconciler types are not maintained\n    return reconciler.flushSyncFromReconciler(fn);\n}\nfunction createSubs(callback, subs) {\n    const sub = {\n        callback\n    };\n    subs.add(sub);\n    return ()=>void subs.delete(sub);\n}\nconst globalEffects = new Set();\nconst globalAfterEffects = new Set();\nconst globalTailEffects = new Set();\n/**\r\n * Adds a global render callback which is called each frame.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addEffect\r\n */ const addEffect = (callback)=>createSubs(callback, globalEffects);\n/**\r\n * Adds a global after-render callback which is called each frame.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addAfterEffect\r\n */ const addAfterEffect = (callback)=>createSubs(callback, globalAfterEffects);\n/**\r\n * Adds a global callback which is called when rendering stops.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addTail\r\n */ const addTail = (callback)=>createSubs(callback, globalTailEffects);\nfunction run(effects, timestamp) {\n    if (!effects.size) return;\n    for (const { callback } of effects.values()){\n        callback(timestamp);\n    }\n}\nfunction flushGlobalEffects(type, timestamp) {\n    switch(type){\n        case 'before':\n            return run(globalEffects, timestamp);\n        case 'after':\n            return run(globalAfterEffects, timestamp);\n        case 'tail':\n            return run(globalTailEffects, timestamp);\n    }\n}\nlet subscribers;\nlet subscription;\nfunction update(timestamp, state, frame) {\n    // Run local effects\n    let delta = state.clock.getDelta();\n    // In frameloop='never' mode, clock times are updated using the provided timestamp\n    if (state.frameloop === 'never' && typeof timestamp === 'number') {\n        delta = timestamp - state.clock.elapsedTime;\n        state.clock.oldTime = state.clock.elapsedTime;\n        state.clock.elapsedTime = timestamp;\n    }\n    // Call subscribers (useFrame)\n    subscribers = state.internal.subscribers;\n    for(let i = 0; i < subscribers.length; i++){\n        subscription = subscribers[i];\n        subscription.ref.current(subscription.store.getState(), delta, frame);\n    }\n    // Render content\n    if (!state.internal.priority && state.gl.render) state.gl.render(state.scene, state.camera);\n    // Decrease frame count\n    state.internal.frames = Math.max(0, state.internal.frames - 1);\n    return state.frameloop === 'always' ? 1 : state.internal.frames;\n}\nlet running = false;\nlet useFrameInProgress = false;\nlet repeat;\nlet frame;\nlet state;\nfunction loop(timestamp) {\n    frame = requestAnimationFrame(loop);\n    running = true;\n    repeat = 0;\n    // Run effects\n    flushGlobalEffects('before', timestamp);\n    // Render all roots\n    useFrameInProgress = true;\n    for (const root of _roots.values()){\n        var _state$gl$xr;\n        state = root.store.getState();\n        // If the frameloop is invalidated, do not run another frame\n        if (state.internal.active && (state.frameloop === 'always' || state.internal.frames > 0) && !((_state$gl$xr = state.gl.xr) != null && _state$gl$xr.isPresenting)) {\n            repeat += update(timestamp, state);\n        }\n    }\n    useFrameInProgress = false;\n    // Run after-effects\n    flushGlobalEffects('after', timestamp);\n    // Stop the loop if nothing invalidates it\n    if (repeat === 0) {\n        // Tail call effects, they are called when rendering stops\n        flushGlobalEffects('tail', timestamp);\n        // Flag end of operation\n        running = false;\n        return cancelAnimationFrame(frame);\n    }\n}\n/**\r\n * Invalidates the view, requesting a frame to be rendered. Will globally invalidate unless passed a root's state.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#invalidate\r\n */ function invalidate(state, frames = 1) {\n    var _state$gl$xr2;\n    if (!state) return _roots.forEach((root)=>invalidate(root.store.getState(), frames));\n    if ((_state$gl$xr2 = state.gl.xr) != null && _state$gl$xr2.isPresenting || !state.internal.active || state.frameloop === 'never') return;\n    if (frames > 1) {\n        // legacy support for people using frames parameters\n        // Increase frames, do not go higher than 60\n        state.internal.frames = Math.min(60, state.internal.frames + frames);\n    } else {\n        if (useFrameInProgress) {\n            //called from within a useFrame, it means the user wants an additional frame\n            state.internal.frames = 2;\n        } else {\n            //the user need a new frame, no need to increment further than 1\n            state.internal.frames = 1;\n        }\n    }\n    // If the render-loop isn't active, start it\n    if (!running) {\n        running = true;\n        requestAnimationFrame(loop);\n    }\n}\n/**\r\n * Advances the frameloop and runs render effects, useful for when manually rendering via `frameloop=\"never\"`.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#advance\r\n */ function advance(timestamp, runGlobalEffects = true, state, frame) {\n    if (runGlobalEffects) flushGlobalEffects('before', timestamp);\n    if (!state) for (const root of _roots.values())update(timestamp, root.store.getState());\n    else update(timestamp, state, frame);\n    if (runGlobalEffects) flushGlobalEffects('after', timestamp);\n}\nconst DOM_EVENTS = {\n    onClick: [\n        'click',\n        false\n    ],\n    onContextMenu: [\n        'contextmenu',\n        false\n    ],\n    onDoubleClick: [\n        'dblclick',\n        false\n    ],\n    onWheel: [\n        'wheel',\n        true\n    ],\n    onPointerDown: [\n        'pointerdown',\n        true\n    ],\n    onPointerUp: [\n        'pointerup',\n        true\n    ],\n    onPointerLeave: [\n        'pointerleave',\n        true\n    ],\n    onPointerMove: [\n        'pointermove',\n        true\n    ],\n    onPointerCancel: [\n        'pointercancel',\n        true\n    ],\n    onLostPointerCapture: [\n        'lostpointercapture',\n        true\n    ]\n};\n/** Default R3F event manager for web */ function createPointerEvents(store) {\n    const { handlePointer } = createEvents(store);\n    return {\n        priority: 1,\n        enabled: true,\n        compute (event, state, previous) {\n            // https://github.com/pmndrs/react-three-fiber/pull/782\n            // Events trigger outside of canvas when moved, use offsetX/Y by default and allow overrides\n            state.pointer.set(event.offsetX / state.size.width * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1);\n            state.raycaster.setFromCamera(state.pointer, state.camera);\n        },\n        connected: undefined,\n        handlers: Object.keys(DOM_EVENTS).reduce((acc, key)=>({\n                ...acc,\n                [key]: handlePointer(key)\n            }), {}),\n        update: ()=>{\n            var _internal$lastEvent;\n            const { events, internal } = store.getState();\n            if ((_internal$lastEvent = internal.lastEvent) != null && _internal$lastEvent.current && events.handlers) events.handlers.onPointerMove(internal.lastEvent.current);\n        },\n        connect: (target)=>{\n            const { set, events } = store.getState();\n            events.disconnect == null ? void 0 : events.disconnect();\n            set((state)=>({\n                    events: {\n                        ...state.events,\n                        connected: target\n                    }\n                }));\n            if (events.handlers) {\n                for(const name in events.handlers){\n                    const event = events.handlers[name];\n                    const [eventName, passive] = DOM_EVENTS[name];\n                    target.addEventListener(eventName, event, {\n                        passive\n                    });\n                }\n            }\n        },\n        disconnect: ()=>{\n            const { set, events } = store.getState();\n            if (events.connected) {\n                if (events.handlers) {\n                    for(const name in events.handlers){\n                        const event = events.handlers[name];\n                        const [eventName] = DOM_EVENTS[name];\n                        events.connected.removeEventListener(eventName, event);\n                    }\n                }\n                set((state)=>({\n                        events: {\n                            ...state.events,\n                            connected: undefined\n                        }\n                    }));\n            }\n        }\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/dist/events-e3cb66e2.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Canvas: () => (/* binding */ Canvas),\n/* harmony export */   ReactThreeFiber: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   _roots: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__._),\n/* harmony export */   act: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   addAfterEffect: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   addEffect: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   addTail: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   advance: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   applyProps: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   buildGraph: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   context: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   createEvents: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   createPortal: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   createRoot: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   dispose: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   events: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   extend: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   flushGlobalEffects: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   flushSync: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   getRootState: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   invalidate: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   reconciler: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   unmountComponentAtNode: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   useFrame: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   useGraph: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.F),\n/* harmony export */   useInstanceHandle: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.z),\n/* harmony export */   useLoader: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.G),\n/* harmony export */   useStore: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   useThree: () => (/* reexport safe */ _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.C)\n/* harmony export */ });\n/* harmony import */ var _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events-e3cb66e2.esm.js */ \"(ssr)/./node_modules/@react-three/fiber/dist/events-e3cb66e2.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var react_use_measure__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-use-measure */ \"(ssr)/./node_modules/react-use-measure/dist/index.js\");\n/* harmony import */ var its_fine__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! its-fine */ \"(ssr)/./node_modules/its-fine/dist/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_reconciler_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-reconciler/constants */ \"(ssr)/./node_modules/react-reconciler/constants.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-reconciler */ \"(ssr)/./node_modules/react-reconciler/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_reconciler__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! scheduler */ \"(ssr)/./node_modules/scheduler/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nfunction CanvasImpl({ ref, children, fallback, resize, style, gl, events = _events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.f, eventSource, eventPrefix, shadows, linear, flat, legacy, orthographic, frameloop, dpr, performance, raycaster, camera, scene, onPointerMissed, onCreated, ...props }) {\n    // Create a known catalogue of Threejs-native elements\n    // This will include the entire THREE namespace by default, users can extend\n    // their own elements by using the createRoot API instead\n    react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"CanvasImpl.useMemo\": ()=>(0,_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.e)(three__WEBPACK_IMPORTED_MODULE_6__)\n    }[\"CanvasImpl.useMemo\"], []);\n    const Bridge = (0,_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)();\n    const [containerRef, containerRect] = (0,react_use_measure__WEBPACK_IMPORTED_MODULE_7__[\"default\"])({\n        scroll: true,\n        debounce: {\n            scroll: 50,\n            resize: 0\n        },\n        ...resize\n    });\n    const canvasRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const divRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, {\n        \"CanvasImpl.useImperativeHandle\": ()=>canvasRef.current\n    }[\"CanvasImpl.useImperativeHandle\"]);\n    const handlePointerMissed = (0,_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(onPointerMissed);\n    const [block, setBlock] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    const [error, setError] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    // Suspend this component if block is a promise (2nd run)\n    if (block) throw block;\n    // Throw exception outwards if anything within canvas throws\n    if (error) throw error;\n    const root = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    (0,_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.b)({\n        \"CanvasImpl.useIsomorphicLayoutEffect\": ()=>{\n            const canvas = canvasRef.current;\n            if (containerRect.width > 0 && containerRect.height > 0 && canvas) {\n                if (!root.current) root.current = (0,_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)(canvas);\n                async function run() {\n                    await root.current.configure({\n                        gl,\n                        scene,\n                        events,\n                        shadows,\n                        linear,\n                        flat,\n                        legacy,\n                        orthographic,\n                        frameloop,\n                        dpr,\n                        performance,\n                        raycaster,\n                        camera,\n                        size: containerRect,\n                        // Pass mutable reference to onPointerMissed so it's free to update\n                        onPointerMissed: {\n                            \"CanvasImpl.useIsomorphicLayoutEffect.run\": (...args)=>handlePointerMissed.current == null ? void 0 : handlePointerMissed.current(...args)\n                        }[\"CanvasImpl.useIsomorphicLayoutEffect.run\"],\n                        onCreated: {\n                            \"CanvasImpl.useIsomorphicLayoutEffect.run\": (state)=>{\n                                // Connect to event source\n                                state.events.connect == null ? void 0 : state.events.connect(eventSource ? (0,_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(eventSource) ? eventSource.current : eventSource : divRef.current);\n                                // Set up compute function\n                                if (eventPrefix) {\n                                    state.setEvents({\n                                        compute: {\n                                            \"CanvasImpl.useIsomorphicLayoutEffect.run\": (event, state)=>{\n                                                const x = event[eventPrefix + 'X'];\n                                                const y = event[eventPrefix + 'Y'];\n                                                state.pointer.set(x / state.size.width * 2 - 1, -(y / state.size.height) * 2 + 1);\n                                                state.raycaster.setFromCamera(state.pointer, state.camera);\n                                            }\n                                        }[\"CanvasImpl.useIsomorphicLayoutEffect.run\"]\n                                    });\n                                }\n                                // Call onCreated callback\n                                onCreated == null ? void 0 : onCreated(state);\n                            }\n                        }[\"CanvasImpl.useIsomorphicLayoutEffect.run\"]\n                    });\n                    root.current.render(/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(Bridge, {\n                        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.E, {\n                            set: setError,\n                            children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(react__WEBPACK_IMPORTED_MODULE_1__.Suspense, {\n                                fallback: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.B, {\n                                    set: setBlock\n                                }),\n                                children: children != null ? children : null\n                            })\n                        })\n                    }));\n                }\n                run();\n            }\n        }\n    }[\"CanvasImpl.useIsomorphicLayoutEffect\"]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"CanvasImpl.useEffect\": ()=>{\n            const canvas = canvasRef.current;\n            if (canvas) return ({\n                \"CanvasImpl.useEffect\": ()=>(0,_events_e3cb66e2_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(canvas)\n            })[\"CanvasImpl.useEffect\"];\n        }\n    }[\"CanvasImpl.useEffect\"], []);\n    // When the event source is not this div, we need to set pointer-events to none\n    // Or else the canvas will block events from reaching the event source\n    const pointerEvents = eventSource ? 'none' : 'auto';\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n        ref: divRef,\n        style: {\n            position: 'relative',\n            width: '100%',\n            height: '100%',\n            overflow: 'hidden',\n            pointerEvents,\n            ...style\n        },\n        ...props,\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", {\n            ref: containerRef,\n            style: {\n                width: '100%',\n                height: '100%'\n            },\n            children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"canvas\", {\n                ref: canvasRef,\n                style: {\n                    display: 'block'\n                },\n                children: fallback\n            })\n        })\n    });\n}\n/**\r\n * A DOM canvas which accepts threejs elements as children.\r\n * @see https://docs.pmnd.rs/react-three-fiber/api/canvas\r\n */ function Canvas(props) {\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(its_fine__WEBPACK_IMPORTED_MODULE_8__.FiberProvider, {\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(CanvasImpl, {\n            ...props\n        })\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js\n");

/***/ })

};
;